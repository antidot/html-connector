/*
 File: ifixit-header-footer.js */
(window.webpackJsonp=window.webpackJsonp||[]).push([[116],{181:function(e,f,c){Object.defineProperty(f,"__esModule",{value:!0});var g="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(b){return typeof b}:function(b){return b&&"function"==typeof Symbol&&b.constructor===Symbol&&b!==Symbol.prototype?"symbol":typeof b},k=function(){function b(a,b){for(var c=0;c<b.length;c++){var h=b[c];h.enumerable=h.enumerable||!1;h.configurable=!0;"value"in h&&(h.writable=!0);Object.defineProperty(a,
h.key,h)}}return function(a,c,d){return c&&b(a.prototype,c),d&&b(a,d),a}}();onDomReady(function(){for(var b=document.querySelectorAll(".newsletter-sub"),a=0;a<b.length;a++)new d(b[a])});var d=function(){function b(a){if(!(this instanceof b))throw new TypeError("Cannot call a class as a function");!0;a&&(this.el=a,this._getForm().addEventListener("submit",this._onSubmit.bind(this)))}return k(b,[{key:"_getEl",value:function(){return this.el}},{key:"_getIconEl",value:function(){var a=this.el.querySelector(".newsletterIcon");
return a?this.el:(a=document.createElement("span"),this.el.append(a),a.addClass("newsletterIcon"),a)}},{key:"_getTextEl",value:function(){return this.el.querySelector("p")}},{key:"_getEmailEl",value:function(){return this._getForm().querySelector("input")}},{key:"_getForm",value:function(){return this.el.querySelector("form")}},{key:"_getEmailSuccessIcon",value:function(){return""}},{key:"_getEmailSuccessText",value:function(){return _js("You are a dashing and intelligent person. We look forward to getting to know you.")}},
{key:"_getEmailDefaultText",value:function(){return _js("Learn something new every month")}},{key:"_getEmailErrorIcon",value:function(){return""}},{key:"_getEmailErrorText",value:function(){return _js("Invalid Email")}},{key:"_getGenericErrorText",value:function(){return _js("An Unknown Error Occurred. Please try again.")}},{key:"_getRecaptchaKey",value:function(){return App.recaptchaToken}},{key:"_getRecaptchaPlaceholder",value:function(){var a=this._getEmailEl().querySelector(".newsletter-recaptcha");
return a||((a=document.createElement("div")).addClass("newsletter-recaptcha"),this._getEmailEl().append(a),a)}},{key:"_signup",value:function(){var a=this;return this._getRecaptchaPromise().then(function(b){return(new Request.AjaxIO("subscribe",{onSuccess:a._signupSuccess.bind(a)})).send(a._getEmailEl().value,b)})}},{key:"_signupWithLoading",value:function(){var a=this._signup();return LoadingIndicator.withPromise(a,{pendingMessage:_js("Signing you up"),successMessage:_js("Signed up!"),failureMessage:_js("Something went wrong.")}),
a}},{key:"_getRecaptchaPromise",value:function(){return Recaptcha.executeInvisible(this._getRecaptchaPlaceholder(),this._getRecaptchaKey(),"newsletter")}},{key:"_signupSuccess",value:function(a){"object"==(void 0===a?"undefined":g(a))&&(a=a.result);"success"==a?this._setSuccess():this._setError()}},{key:"_setDefault",value:function(){this.el.removeClass("error");this.el.removeClass("success");this._getIconEl().removeClass(this._getEmailSuccessIcon());this._getTextEl().set("text",this._getEmailDefaultText())}},
{key:"_setSuccess",value:function(){this.el.removeClass("error");this.el.addClass("success");this._getIconEl().addClass(this._getEmailSuccessIcon());this._getTextEl().set("text",this._getEmailSuccessText());this._getForm().hide();trackEvent("Footer Newsletter","Subscribe");fbq("track","CompleteRegistration",{content_name:"Newsletter"})}},{key:"_setError",value:function(){this.el.addClass("error");this._getIconEl().addClass(this._getEmailErrorIcon());this._getTextEl().set("text",this._getEmailErrorText())}},
{key:"_validate",value:function(){var a=Validation.email(this._getEmailEl().value);return a||this._setError(),a}},{key:"_onSubmit",value:function(a){a.stopPropagation();a.preventDefault();this._setDefault();this._validate()&&this._signupWithLoading()}}]),b}();f.default=d},1946:function(e,f,c){c(481);c(1947);c(483);c(480);c(484);c(485);c(479);c(181);c(478);c(1948)},1947:function(e,f,c){Object.defineProperty(f,"__esModule",{value:!0});e=f.Header=window.Header={};e.showLoggedIn=function(c){};e.showLoggedOut=
function(c){}},1948:function(e,f,c){var g;e=c(235);c=(g=c(490))&&g.__esModule?g:{default:g};new e.KeyboardNavigation({keys:{"/":c.default}})},478:function(e,f,c){onDomReady(function(){for(var c=document.querySelectorAll(".js-slide-toggle"),e=function(b){b=b.currentTarget;var a=b.getNext(".js-slide-drawer");600>window.innerWidth&&("0px"==a.getStyle("height")?(TweenMax.set(a,{height:"auto"}),TweenMax.from(a,.2,{height:0}),b.addClass("drawer-open")):(TweenMax.to(a,.2,{height:0}),b.removeClass("drawer-open")))},
d=0;d<c.length;d++)c[d].addEventListener("click",e)})},479:function(e,f,c){var g,k=function(){function a(a,b){for(var c=0;c<b.length;c++){var d=b[c];d.enumerable=d.enumerable||!1;d.configurable=!0;"value"in d&&(d.writable=!0);Object.defineProperty(a,d.key,d)}}return function(b,c,d){return c&&a(b.prototype,c),d&&a(b,d),b}}(),d=(g=c(181))&&g.__esModule?g:{default:g};FrameModules.add("NewsletterFrameModule",function(){new b});var b=function(a){function b(){if(!(this instanceof b))throw new TypeError("Cannot call a class as a function");
!0;var a=document.querySelector("#newsletterFooterDiv");a=(b.__proto__||Object.getPrototypeOf(b)).call(this,a);if(!this)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!a||"object"!=typeof a&&"function"!=typeof a?this:a}return function(a,b){if("function"!=typeof b&&null!==b)throw new TypeError("Super expression must either be null or a function, not "+typeof b);a.prototype=Object.create(b&&b.prototype,{constructor:{value:a,enumerable:!1,writable:!0,configurable:!0}});
b&&(Object.setPrototypeOf?Object.setPrototypeOf(a,b):a.__proto__=b)}(b,d.default),k(b,[{key:"_getEl",value:function(){return this.el}},{key:"_getIconEl",value:function(){return document.querySelector("#newsletterIcon")}},{key:"_getTextEl",value:function(){return document.querySelector("#newsletterText")}},{key:"_getEmailEl",value:function(){return document.querySelector("#newsletterEmailInput")}},{key:"_getForm",value:function(){return document.querySelector("#newsletterForm")}},{key:"_getEmailSuccessIcon",
value:function(){return"fa fa-check-circle"}},{key:"_getEmailErrorIcon",value:function(){return"fa fa-times"}},{key:"_getRecaptchaKey",value:function(){return this._getForm().get("data-sitekey")}},{key:"_getRecaptchaPlaceholder",value:function(){return document.querySelector("#newsletter-recaptcha")}}]),b}()},481:function(e,f,c){c(12)(c(482))},482:function(e,f){e.exports="!function(e){if(\"object\"\x3d\x3dtypeof exports\x26\x26\"undefined\"!\x3dtypeof module)module.exports\x3de();else if(\"function\"\x3d\x3dtypeof define\x26\x26define.amd)define([],e);else{var f;\"undefined\"!\x3dtypeof window?f\x3dwindow:\"undefined\"!\x3dtypeof global?f\x3dglobal:\"undefined\"!\x3dtypeof self\x26\x26(f\x3dself),f.io\x3de()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a\x3dtypeof require\x3d\x3d\"function\"\x26\x26require;if(!u\x26\x26a)return a(o,!0);if(i)return i(o,!0);throw new Error(\"Cannot find module '\"+o+\"'\")}var f\x3dn[o]\x3d{exports:{}};t[o][0].call(f.exports,function(e){var n\x3dt[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i\x3dtypeof require\x3d\x3d\"function\"\x26\x26require;for(var o\x3d0;o\x3cr.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\n\nmodule.exports \x3d _dereq_('./lib/');\n\n},{\"./lib/\":2}],2:[function(_dereq_,module,exports){\n\n/**\n * Module dependencies.\n */\n\nvar url \x3d _dereq_('./url');\nvar parser \x3d _dereq_('socket.io-parser');\nvar Manager \x3d _dereq_('./manager');\nvar debug \x3d _dereq_('debug')('socket.io-client');\n\n/**\n * Module exports.\n */\n\nmodule.exports \x3d exports \x3d lookup;\n\n/**\n * Managers cache.\n */\n\nvar cache \x3d exports.managers \x3d {};\n\n/**\n * Looks up an existing `Manager` for multiplexing.\n * If the user summons:\n *\n *   `io('http://localhost/a');`\n *   `io('http://localhost/b');`\n *\n * We reuse the existing instance based on same scheme/port/host,\n * and we initialize sockets for each namespace.\n *\n * @api public\n */\n\nfunction lookup(uri, opts) {\n  if (typeof uri \x3d\x3d 'object') {\n    opts \x3d uri;\n    uri \x3d undefined;\n  }\n\n  opts \x3d opts || {};\n\n  var parsed \x3d url(uri);\n  var source \x3d parsed.source;\n  var id \x3d parsed.id;\n  var path \x3d parsed.path;\n  var sameNamespace \x3d (cache[id] \x26\x26 cache[id].nsps[path] \x26\x26\n                       path \x3d\x3d cache[id].nsps[path].nsp);\n  var newConnection \x3d opts.forceNew || opts['force new connection'] ||\n                      false \x3d\x3d\x3d opts.multiplex || sameNamespace;\n\n  var io;\n\n  if (newConnection) {\n    debug('ignoring socket cache for %s', source);\n    io \x3d Manager(source, opts);\n  } else {\n    if (!cache[id]) {\n      debug('new io instance for %s', source);\n      cache[id] \x3d Manager(source, opts);\n    }\n    io \x3d cache[id];\n  }\n\n  return io.socket(parsed.path);\n}\n\n/**\n * Protocol version.\n *\n * @api public\n */\n\nexports.protocol \x3d parser.protocol;\n\n/**\n * `connect`.\n *\n * @param {String} uri\n * @api public\n */\n\nexports.connect \x3d lookup;\n\n/**\n * Expose constructors for standalone build.\n *\n * @api public\n */\n\nexports.Manager \x3d _dereq_('./manager');\nexports.Socket \x3d _dereq_('./socket');\n\n},{\"./manager\":3,\"./socket\":5,\"./url\":6,\"debug\":10,\"socket.io-parser\":44}],3:[function(_dereq_,module,exports){\n\n/**\n * Module dependencies.\n */\n\nvar url \x3d _dereq_('./url');\nvar eio \x3d _dereq_('engine.io-client');\nvar Socket \x3d _dereq_('./socket');\nvar Emitter \x3d _dereq_('component-emitter');\nvar parser \x3d _dereq_('socket.io-parser');\nvar on \x3d _dereq_('./on');\nvar bind \x3d _dereq_('component-bind');\nvar object \x3d _dereq_('object-component');\nvar debug \x3d _dereq_('debug')('socket.io-client:manager');\nvar indexOf \x3d _dereq_('indexof');\nvar Backoff \x3d _dereq_('backo2');\n\n/**\n * Module exports\n */\n\nmodule.exports \x3d Manager;\n\n/**\n * `Manager` constructor.\n *\n * @param {String} engine instance or engine uri/opts\n * @param {Object} options\n * @api public\n */\n\nfunction Manager(uri, opts){\n  if (!(this instanceof Manager)) return new Manager(uri, opts);\n  if (uri \x26\x26 ('object' \x3d\x3d typeof uri)) {\n    opts \x3d uri;\n    uri \x3d undefined;\n  }\n  opts \x3d opts || {};\n\n  opts.path \x3d opts.path || '/socket.io';\n  this.nsps \x3d {};\n  this.subs \x3d [];\n  this.opts \x3d opts;\n  this.reconnection(opts.reconnection !\x3d\x3d false);\n  this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);\n  this.reconnectionDelay(opts.reconnectionDelay || 1000);\n  this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);\n  this.randomizationFactor(opts.randomizationFactor || 0.5);\n  this.backoff \x3d new Backoff({\n    min: this.reconnectionDelay(),\n    max: this.reconnectionDelayMax(),\n    jitter: this.randomizationFactor()\n  });\n  this.timeout(null \x3d\x3d opts.timeout ? 20000 : opts.timeout);\n  this.readyState \x3d 'closed';\n  this.uri \x3d uri;\n  this.connected \x3d [];\n  this.encoding \x3d false;\n  this.packetBuffer \x3d [];\n  this.encoder \x3d new parser.Encoder();\n  this.decoder \x3d new parser.Decoder();\n  this.autoConnect \x3d opts.autoConnect !\x3d\x3d false;\n  if (this.autoConnect) this.open();\n}\n\n/**\n * Propagate given event to sockets and emit on `this`\n *\n * @api private\n */\n\nManager.prototype.emitAll \x3d function() {\n  this.emit.apply(this, arguments);\n  for (var nsp in this.nsps) {\n    this.nsps[nsp].emit.apply(this.nsps[nsp], arguments);\n  }\n};\n\n/**\n * Update `socket.id` of all sockets\n *\n * @api private\n */\n\nManager.prototype.updateSocketIds \x3d function(){\n  for (var nsp in this.nsps) {\n    this.nsps[nsp].id \x3d this.engine.id;\n  }\n};\n\n/**\n * Mix in `Emitter`.\n */\n\nEmitter(Manager.prototype);\n\n/**\n * Sets the `reconnection` config.\n *\n * @param {Boolean} true/false if it should automatically reconnect\n * @return {Manager} self or value\n * @api public\n */\n\nManager.prototype.reconnection \x3d function(v){\n  if (!arguments.length) return this._reconnection;\n  this._reconnection \x3d !!v;\n  return this;\n};\n\n/**\n * Sets the reconnection attempts config.\n *\n * @param {Number} max reconnection attempts before giving up\n * @return {Manager} self or value\n * @api public\n */\n\nManager.prototype.reconnectionAttempts \x3d function(v){\n  if (!arguments.length) return this._reconnectionAttempts;\n  this._reconnectionAttempts \x3d v;\n  return this;\n};\n\n/**\n * Sets the delay between reconnections.\n *\n * @param {Number} delay\n * @return {Manager} self or value\n * @api public\n */\n\nManager.prototype.reconnectionDelay \x3d function(v){\n  if (!arguments.length) return this._reconnectionDelay;\n  this._reconnectionDelay \x3d v;\n  this.backoff \x26\x26 this.backoff.setMin(v);\n  return this;\n};\n\nManager.prototype.randomizationFactor \x3d function(v){\n  if (!arguments.length) return this._randomizationFactor;\n  this._randomizationFactor \x3d v;\n  this.backoff \x26\x26 this.backoff.setJitter(v);\n  return this;\n};\n\n/**\n * Sets the maximum delay between reconnections.\n *\n * @param {Number} delay\n * @return {Manager} self or value\n * @api public\n */\n\nManager.prototype.reconnectionDelayMax \x3d function(v){\n  if (!arguments.length) return this._reconnectionDelayMax;\n  this._reconnectionDelayMax \x3d v;\n  this.backoff \x26\x26 this.backoff.setMax(v);\n  return this;\n};\n\n/**\n * Sets the connection timeout. `false` to disable\n *\n * @return {Manager} self or value\n * @api public\n */\n\nManager.prototype.timeout \x3d function(v){\n  if (!arguments.length) return this._timeout;\n  this._timeout \x3d v;\n  return this;\n};\n\n/**\n * Starts trying to reconnect if reconnection is enabled and we have not\n * started reconnecting yet\n *\n * @api private\n */\n\nManager.prototype.maybeReconnectOnOpen \x3d function() {\n  // Only try to reconnect if it's the first time we're connecting\n  if (!this.reconnecting \x26\x26 this._reconnection \x26\x26 this.backoff.attempts \x3d\x3d\x3d 0) {\n    // keeps reconnection from firing twice for the same reconnection loop\n    this.reconnect();\n  }\n};\n\n\n/**\n * Sets the current transport `socket`.\n *\n * @param {Function} optional, callback\n * @return {Manager} self\n * @api public\n */\n\nManager.prototype.open \x3d\nManager.prototype.connect \x3d function(fn){\n  debug('readyState %s', this.readyState);\n  if (~this.readyState.indexOf('open')) return this;\n\n  debug('opening %s', this.uri);\n  this.engine \x3d eio(this.uri, this.opts);\n  var socket \x3d this.engine;\n  var self \x3d this;\n  this.readyState \x3d 'opening';\n  this.skipReconnect \x3d false;\n\n  // emit `open`\n  var openSub \x3d on(socket, 'open', function() {\n    self.onopen();\n    fn \x26\x26 fn();\n  });\n\n  // emit `connect_error`\n  var errorSub \x3d on(socket, 'error', function(data){\n    debug('connect_error');\n    self.cleanup();\n    self.readyState \x3d 'closed';\n    self.emitAll('connect_error', data);\n    if (fn) {\n      var err \x3d new Error('Connection error');\n      err.data \x3d data;\n      fn(err);\n    } else {\n      // Only do this if there is no fn to handle the error\n      self.maybeReconnectOnOpen();\n    }\n  });\n\n  // emit `connect_timeout`\n  if (false !\x3d\x3d this._timeout) {\n    var timeout \x3d this._timeout;\n    debug('connect attempt will timeout after %d', timeout);\n\n    // set timer\n    var timer \x3d setTimeout(function(){\n      debug('connect attempt timed out after %d', timeout);\n      openSub.destroy();\n      socket.close();\n      socket.emit('error', 'timeout');\n      self.emitAll('connect_timeout', timeout);\n    }, timeout);\n\n    this.subs.push({\n      destroy: function(){\n        clearTimeout(timer);\n      }\n    });\n  }\n\n  this.subs.push(openSub);\n  this.subs.push(errorSub);\n\n  return this;\n};\n\n/**\n * Called upon transport open.\n *\n * @api private\n */\n\nManager.prototype.onopen \x3d function(){\n  debug('open');\n\n  // clear old subs\n  this.cleanup();\n\n  // mark as open\n  this.readyState \x3d 'open';\n  this.emit('open');\n\n  // add new subs\n  var socket \x3d this.engine;\n  this.subs.push(on(socket, 'data', bind(this, 'ondata')));\n  this.subs.push(on(this.decoder, 'decoded', bind(this, 'ondecoded')));\n  this.subs.push(on(socket, 'error', bind(this, 'onerror')));\n  this.subs.push(on(socket, 'close', bind(this, 'onclose')));\n};\n\n/**\n * Called with data.\n *\n * @api private\n */\n\nManager.prototype.ondata \x3d function(data){\n  this.decoder.add(data);\n};\n\n/**\n * Called when parser fully decodes a packet.\n *\n * @api private\n */\n\nManager.prototype.ondecoded \x3d function(packet) {\n  this.emit('packet', packet);\n};\n\n/**\n * Called upon socket error.\n *\n * @api private\n */\n\nManager.prototype.onerror \x3d function(err){\n  debug('error', err);\n  this.emitAll('error', err);\n};\n\n/**\n * Creates a new socket for the given `nsp`.\n *\n * @return {Socket}\n * @api public\n */\n\nManager.prototype.socket \x3d function(nsp){\n  var socket \x3d this.nsps[nsp];\n  if (!socket) {\n    socket \x3d new Socket(this, nsp);\n    this.nsps[nsp] \x3d socket;\n    var self \x3d this;\n    socket.on('connect', function(){\n      socket.id \x3d self.engine.id;\n      if (!~indexOf(self.connected, socket)) {\n        self.connected.push(socket);\n      }\n    });\n  }\n  return socket;\n};\n\n/**\n * Called upon a socket close.\n *\n * @param {Socket} socket\n */\n\nManager.prototype.destroy \x3d function(socket){\n  var index \x3d indexOf(this.connected, socket);\n  if (~index) this.connected.splice(index, 1);\n  if (this.connected.length) return;\n\n  this.close();\n};\n\n/**\n * Writes a packet.\n *\n * @param {Object} packet\n * @api private\n */\n\nManager.prototype.packet \x3d function(packet){\n  debug('writing packet %j', packet);\n  var self \x3d this;\n\n  if (!self.encoding) {\n    // encode, then write to engine with result\n    self.encoding \x3d true;\n    this.encoder.encode(packet, function(encodedPackets) {\n      for (var i \x3d 0; i \x3c encodedPackets.length; i++) {\n        self.engine.write(encodedPackets[i]);\n      }\n      self.encoding \x3d false;\n      self.processPacketQueue();\n    });\n  } else { // add packet to the queue\n    self.packetBuffer.push(packet);\n  }\n};\n\n/**\n * If packet buffer is non-empty, begins encoding the\n * next packet in line.\n *\n * @api private\n */\n\nManager.prototype.processPacketQueue \x3d function() {\n  if (this.packetBuffer.length \x3e 0 \x26\x26 !this.encoding) {\n    var pack \x3d this.packetBuffer.shift();\n    this.packet(pack);\n  }\n};\n\n/**\n * Clean up transport subscriptions and packet buffer.\n *\n * @api private\n */\n\nManager.prototype.cleanup \x3d function(){\n  var sub;\n  while (sub \x3d this.subs.shift()) sub.destroy();\n\n  this.packetBuffer \x3d [];\n  this.encoding \x3d false;\n\n  this.decoder.destroy();\n};\n\n/**\n * Close the current socket.\n *\n * @api private\n */\n\nManager.prototype.close \x3d\nManager.prototype.disconnect \x3d function(){\n  this.skipReconnect \x3d true;\n  this.backoff.reset();\n  this.readyState \x3d 'closed';\n  this.engine \x26\x26 this.engine.close();\n};\n\n/**\n * Called upon engine close.\n *\n * @api private\n */\n\nManager.prototype.onclose \x3d function(reason){\n  debug('close');\n  this.cleanup();\n  this.backoff.reset();\n  this.readyState \x3d 'closed';\n  this.emit('close', reason);\n  if (this._reconnection \x26\x26 !this.skipReconnect) {\n    this.reconnect();\n  }\n};\n\n/**\n * Attempt a reconnection.\n *\n * @api private\n */\n\nManager.prototype.reconnect \x3d function(){\n  if (this.reconnecting || this.skipReconnect) return this;\n\n  var self \x3d this;\n\n  if (this.backoff.attempts \x3e\x3d this._reconnectionAttempts) {\n    debug('reconnect failed');\n    this.backoff.reset();\n    this.emitAll('reconnect_failed');\n    this.reconnecting \x3d false;\n  } else {\n    var delay \x3d this.backoff.duration();\n    debug('will wait %dms before reconnect attempt', delay);\n\n    this.reconnecting \x3d true;\n    var timer \x3d setTimeout(function(){\n      if (self.skipReconnect) return;\n\n      debug('attempting reconnect');\n      self.emitAll('reconnect_attempt', self.backoff.attempts);\n      self.emitAll('reconnecting', self.backoff.attempts);\n\n      // check again for the case socket closed in above events\n      if (self.skipReconnect) return;\n\n      self.open(function(err){\n        if (err) {\n          debug('reconnect attempt error');\n          self.reconnecting \x3d false;\n          self.reconnect();\n          self.emitAll('reconnect_error', err.data);\n        } else {\n          debug('reconnect success');\n          self.onreconnect();\n        }\n      });\n    }, delay);\n\n    this.subs.push({\n      destroy: function(){\n        clearTimeout(timer);\n      }\n    });\n  }\n};\n\n/**\n * Called upon successful reconnect.\n *\n * @api private\n */\n\nManager.prototype.onreconnect \x3d function(){\n  var attempt \x3d this.backoff.attempts;\n  this.reconnecting \x3d false;\n  this.backoff.reset();\n  this.updateSocketIds();\n  this.emitAll('reconnect', attempt);\n};\n\n},{\"./on\":4,\"./socket\":5,\"./url\":6,\"backo2\":7,\"component-bind\":8,\"component-emitter\":9,\"debug\":10,\"engine.io-client\":11,\"indexof\":40,\"object-component\":41,\"socket.io-parser\":44}],4:[function(_dereq_,module,exports){\n\n/**\n * Module exports.\n */\n\nmodule.exports \x3d on;\n\n/**\n * Helper for subscriptions.\n *\n * @param {Object|EventEmitter} obj with `Emitter` mixin or `EventEmitter`\n * @param {String} event name\n * @param {Function} callback\n * @api public\n */\n\nfunction on(obj, ev, fn) {\n  obj.on(ev, fn);\n  return {\n    destroy: function(){\n      obj.removeListener(ev, fn);\n    }\n  };\n}\n\n},{}],5:[function(_dereq_,module,exports){\n\n/**\n * Module dependencies.\n */\n\nvar parser \x3d _dereq_('socket.io-parser');\nvar Emitter \x3d _dereq_('component-emitter');\nvar toArray \x3d _dereq_('to-array');\nvar on \x3d _dereq_('./on');\nvar bind \x3d _dereq_('component-bind');\nvar debug \x3d _dereq_('debug')('socket.io-client:socket');\nvar hasBin \x3d _dereq_('has-binary');\n\n/**\n * Module exports.\n */\n\nmodule.exports \x3d exports \x3d Socket;\n\n/**\n * Internal events (blacklisted).\n * These events can't be emitted by the user.\n *\n * @api private\n */\n\nvar events \x3d {\n  connect: 1,\n  connect_error: 1,\n  connect_timeout: 1,\n  disconnect: 1,\n  error: 1,\n  reconnect: 1,\n  reconnect_attempt: 1,\n  reconnect_failed: 1,\n  reconnect_error: 1,\n  reconnecting: 1\n};\n\n/**\n * Shortcut to `Emitter#emit`.\n */\n\nvar emit \x3d Emitter.prototype.emit;\n\n/**\n * `Socket` constructor.\n *\n * @api public\n */\n\nfunction Socket(io, nsp){\n  this.io \x3d io;\n  this.nsp \x3d nsp;\n  this.json \x3d this; // compat\n  this.ids \x3d 0;\n  this.acks \x3d {};\n  if (this.io.autoConnect) this.open();\n  this.receiveBuffer \x3d [];\n  this.sendBuffer \x3d [];\n  this.connected \x3d false;\n  this.disconnected \x3d true;\n}\n\n/**\n * Mix in `Emitter`.\n */\n\nEmitter(Socket.prototype);\n\n/**\n * Subscribe to open, close and packet events\n *\n * @api private\n */\n\nSocket.prototype.subEvents \x3d function() {\n  if (this.subs) return;\n\n  var io \x3d this.io;\n  this.subs \x3d [\n    on(io, 'open', bind(this, 'onopen')),\n    on(io, 'packet', bind(this, 'onpacket')),\n    on(io, 'close', bind(this, 'onclose'))\n  ];\n};\n\n/**\n * \"Opens\" the socket.\n *\n * @api public\n */\n\nSocket.prototype.open \x3d\nSocket.prototype.connect \x3d function(){\n  if (this.connected) return this;\n\n  this.subEvents();\n  this.io.open(); // ensure open\n  if ('open' \x3d\x3d this.io.readyState) this.onopen();\n  return this;\n};\n\n/**\n * Sends a `message` event.\n *\n * @return {Socket} self\n * @api public\n */\n\nSocket.prototype.send \x3d function(){\n  var args \x3d toArray(arguments);\n  args.unshift('message');\n  this.emit.apply(this, args);\n  return this;\n};\n\n/**\n * Override `emit`.\n * If the event is in `events`, it's emitted normally.\n *\n * @param {String} event name\n * @return {Socket} self\n * @api public\n */\n\nSocket.prototype.emit \x3d function(ev){\n  if (events.hasOwnProperty(ev)) {\n    emit.apply(this, arguments);\n    return this;\n  }\n\n  var args \x3d toArray(arguments);\n  var parserType \x3d parser.EVENT; // default\n  if (hasBin(args)) { parserType \x3d parser.BINARY_EVENT; } // binary\n  var packet \x3d { type: parserType, data: args };\n\n  // event ack callback\n  if ('function' \x3d\x3d typeof args[args.length - 1]) {\n    debug('emitting packet with ack id %d', this.ids);\n    this.acks[this.ids] \x3d args.pop();\n    packet.id \x3d this.ids++;\n  }\n\n  if (this.connected) {\n    this.packet(packet);\n  } else {\n    this.sendBuffer.push(packet);\n  }\n\n  return this;\n};\n\n/**\n * Sends a packet.\n *\n * @param {Object} packet\n * @api private\n */\n\nSocket.prototype.packet \x3d function(packet){\n  packet.nsp \x3d this.nsp;\n  this.io.packet(packet);\n};\n\n/**\n * Called upon engine `open`.\n *\n * @api private\n */\n\nSocket.prototype.onopen \x3d function(){\n  debug('transport is open - connecting');\n\n  // write connect packet if necessary\n  if ('/' !\x3d this.nsp) {\n    this.packet({ type: parser.CONNECT });\n  }\n};\n\n/**\n * Called upon engine `close`.\n *\n * @param {String} reason\n * @api private\n */\n\nSocket.prototype.onclose \x3d function(reason){\n  debug('close (%s)', reason);\n  this.connected \x3d false;\n  this.disconnected \x3d true;\n  delete this.id;\n  this.emit('disconnect', reason);\n};\n\n/**\n * Called with socket packet.\n *\n * @param {Object} packet\n * @api private\n */\n\nSocket.prototype.onpacket \x3d function(packet){\n  if (packet.nsp !\x3d this.nsp) return;\n\n  switch (packet.type) {\n    case parser.CONNECT:\n      this.onconnect();\n      break;\n\n    case parser.EVENT:\n      this.onevent(packet);\n      break;\n\n    case parser.BINARY_EVENT:\n      this.onevent(packet);\n      break;\n\n    case parser.ACK:\n      this.onack(packet);\n      break;\n\n    case parser.BINARY_ACK:\n      this.onack(packet);\n      break;\n\n    case parser.DISCONNECT:\n      this.ondisconnect();\n      break;\n\n    case parser.ERROR:\n      this.emit('error', packet.data);\n      break;\n  }\n};\n\n/**\n * Called upon a server event.\n *\n * @param {Object} packet\n * @api private\n */\n\nSocket.prototype.onevent \x3d function(packet){\n  var args \x3d packet.data || [];\n  debug('emitting event %j', args);\n\n  if (null !\x3d packet.id) {\n    debug('attaching ack callback to event');\n    args.push(this.ack(packet.id));\n  }\n\n  if (this.connected) {\n    emit.apply(this, args);\n  } else {\n    this.receiveBuffer.push(args);\n  }\n};\n\n/**\n * Produces an ack callback to emit with an event.\n *\n * @api private\n */\n\nSocket.prototype.ack \x3d function(id){\n  var self \x3d this;\n  var sent \x3d false;\n  return function(){\n    // prevent double callbacks\n    if (sent) return;\n    sent \x3d true;\n    var args \x3d toArray(arguments);\n    debug('sending ack %j', args);\n\n    var type \x3d hasBin(args) ? parser.BINARY_ACK : parser.ACK;\n    self.packet({\n      type: type,\n      id: id,\n      data: args\n    });\n  };\n};\n\n/**\n * Called upon a server acknowlegement.\n *\n * @param {Object} packet\n * @api private\n */\n\nSocket.prototype.onack \x3d function(packet){\n  debug('calling ack %s with %j', packet.id, packet.data);\n  var fn \x3d this.acks[packet.id];\n  fn.apply(this, packet.data);\n  delete this.acks[packet.id];\n};\n\n/**\n * Called upon server connect.\n *\n * @api private\n */\n\nSocket.prototype.onconnect \x3d function(){\n  this.connected \x3d true;\n  this.disconnected \x3d false;\n  this.emit('connect');\n  this.emitBuffered();\n};\n\n/**\n * Emit buffered events (received and emitted).\n *\n * @api private\n */\n\nSocket.prototype.emitBuffered \x3d function(){\n  var i;\n  for (i \x3d 0; i \x3c this.receiveBuffer.length; i++) {\n    emit.apply(this, this.receiveBuffer[i]);\n  }\n  this.receiveBuffer \x3d [];\n\n  for (i \x3d 0; i \x3c this.sendBuffer.length; i++) {\n    this.packet(this.sendBuffer[i]);\n  }\n  this.sendBuffer \x3d [];\n};\n\n/**\n * Called upon server disconnect.\n *\n * @api private\n */\n\nSocket.prototype.ondisconnect \x3d function(){\n  debug('server disconnect (%s)', this.nsp);\n  this.destroy();\n  this.onclose('io server disconnect');\n};\n\n/**\n * Called upon forced client/server side disconnections,\n * this method ensures the manager stops tracking us and\n * that reconnections don't get triggered for this.\n *\n * @api private.\n */\n\nSocket.prototype.destroy \x3d function(){\n  if (this.subs) {\n    // clean subscriptions to avoid reconnections\n    for (var i \x3d 0; i \x3c this.subs.length; i++) {\n      this.subs[i].destroy();\n    }\n    this.subs \x3d null;\n  }\n\n  this.io.destroy(this);\n};\n\n/**\n * Disconnects the socket manually.\n *\n * @return {Socket} self\n * @api public\n */\n\nSocket.prototype.close \x3d\nSocket.prototype.disconnect \x3d function(){\n  if (this.connected) {\n    debug('performing disconnect (%s)', this.nsp);\n    this.packet({ type: parser.DISCONNECT });\n  }\n\n  // remove socket from pool\n  this.destroy();\n\n  if (this.connected) {\n    // fire events\n    this.onclose('io client disconnect');\n  }\n  return this;\n};\n\n},{\"./on\":4,\"component-bind\":8,\"component-emitter\":9,\"debug\":10,\"has-binary\":36,\"socket.io-parser\":44,\"to-array\":48}],6:[function(_dereq_,module,exports){\n(function (global){\n\n/**\n * Module dependencies.\n */\n\nvar parseuri \x3d _dereq_('parseuri');\nvar debug \x3d _dereq_('debug')('socket.io-client:url');\n\n/**\n * Module exports.\n */\n\nmodule.exports \x3d url;\n\n/**\n * URL parser.\n *\n * @param {String} url\n * @param {Object} An object meant to mimic window.location.\n *                 Defaults to window.location.\n * @api public\n */\n\nfunction url(uri, loc){\n  var obj \x3d uri;\n\n  // default to window.location\n  var loc \x3d loc || global.location;\n  if (null \x3d\x3d uri) uri \x3d loc.protocol + '//' + loc.host;\n\n  // relative path support\n  if ('string' \x3d\x3d typeof uri) {\n    if ('/' \x3d\x3d uri.charAt(0)) {\n      if ('/' \x3d\x3d uri.charAt(1)) {\n        uri \x3d loc.protocol + uri;\n      } else {\n        uri \x3d loc.hostname + uri;\n      }\n    }\n\n    if (!/^(https?|wss?):\\/\\//.test(uri)) {\n      debug('protocol-less url %s', uri);\n      if ('undefined' !\x3d typeof loc) {\n        uri \x3d loc.protocol + '//' + uri;\n      } else {\n        uri \x3d 'https://' + uri;\n      }\n    }\n\n    // parse\n    debug('parse %s', uri);\n    obj \x3d parseuri(uri);\n  }\n\n  // make sure we treat `localhost:80` and `localhost` equally\n  if (!obj.port) {\n    if (/^(http|ws)$/.test(obj.protocol)) {\n      obj.port \x3d '80';\n    }\n    else if (/^(http|ws)s$/.test(obj.protocol)) {\n      obj.port \x3d '443';\n    }\n  }\n\n  obj.path \x3d obj.path || '/';\n\n  // define unique id\n  obj.id \x3d obj.protocol + '://' + obj.host + ':' + obj.port;\n  // define href\n  obj.href \x3d obj.protocol + '://' + obj.host + (loc \x26\x26 loc.port \x3d\x3d obj.port ? '' : (':' + obj.port));\n\n  return obj;\n}\n\n}).call(this,typeof self !\x3d\x3d \"undefined\" ? self : typeof window !\x3d\x3d \"undefined\" ? window : {})\n},{\"debug\":10,\"parseuri\":42}],7:[function(_dereq_,module,exports){\n\n/**\n * Expose `Backoff`.\n */\n\nmodule.exports \x3d Backoff;\n\n/**\n * Initialize backoff timer with `opts`.\n *\n * - `min` initial timeout in milliseconds [100]\n * - `max` max timeout [10000]\n * - `jitter` [0]\n * - `factor` [2]\n *\n * @param {Object} opts\n * @api public\n */\n\nfunction Backoff(opts) {\n  opts \x3d opts || {};\n  this.ms \x3d opts.min || 100;\n  this.max \x3d opts.max || 10000;\n  this.factor \x3d opts.factor || 2;\n  this.jitter \x3d opts.jitter \x3e 0 \x26\x26 opts.jitter \x3c\x3d 1 ? opts.jitter : 0;\n  this.attempts \x3d 0;\n}\n\n/**\n * Return the backoff duration.\n *\n * @return {Number}\n * @api public\n */\n\nBackoff.prototype.duration \x3d function(){\n  var ms \x3d this.ms * Math.pow(this.factor, this.attempts++);\n  if (this.jitter) {\n    var rand \x3d  Math.random();\n    var deviation \x3d Math.floor(rand * this.jitter * ms);\n    ms \x3d (Math.floor(rand * 10) \x26 1) \x3d\x3d 0  ? ms - deviation : ms + deviation;\n  }\n  return Math.min(ms, this.max) | 0;\n};\n\n/**\n * Reset the number of attempts.\n *\n * @api public\n */\n\nBackoff.prototype.reset \x3d function(){\n  this.attempts \x3d 0;\n};\n\n/**\n * Set the minimum duration\n *\n * @api public\n */\n\nBackoff.prototype.setMin \x3d function(min){\n  this.ms \x3d min;\n};\n\n/**\n * Set the maximum duration\n *\n * @api public\n */\n\nBackoff.prototype.setMax \x3d function(max){\n  this.max \x3d max;\n};\n\n/**\n * Set the jitter\n *\n * @api public\n */\n\nBackoff.prototype.setJitter \x3d function(jitter){\n  this.jitter \x3d jitter;\n};\n\n\n},{}],8:[function(_dereq_,module,exports){\n/**\n * Slice reference.\n */\n\nvar slice \x3d [].slice;\n\n/**\n * Bind `obj` to `fn`.\n *\n * @param {Object} obj\n * @param {Function|String} fn or string\n * @return {Function}\n * @api public\n */\n\nmodule.exports \x3d function(obj, fn){\n  if ('string' \x3d\x3d typeof fn) fn \x3d obj[fn];\n  if ('function' !\x3d typeof fn) throw new Error('bind() requires a function');\n  var args \x3d slice.call(arguments, 2);\n  return function(){\n    return fn.apply(obj, args.concat(slice.call(arguments)));\n  }\n};\n\n},{}],9:[function(_dereq_,module,exports){\n\n/**\n * Expose `Emitter`.\n */\n\nmodule.exports \x3d Emitter;\n\n/**\n * Initialize a new `Emitter`.\n *\n * @api public\n */\n\nfunction Emitter(obj) {\n  if (obj) return mixin(obj);\n};\n\n/**\n * Mixin the emitter properties.\n *\n * @param {Object} obj\n * @return {Object}\n * @api private\n */\n\nfunction mixin(obj) {\n  for (var key in Emitter.prototype) {\n    obj[key] \x3d Emitter.prototype[key];\n  }\n  return obj;\n}\n\n/**\n * Listen on the given `event` with `fn`.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.on \x3d\nEmitter.prototype.addEventListener \x3d function(event, fn){\n  this._callbacks \x3d this._callbacks || {};\n  (this._callbacks[event] \x3d this._callbacks[event] || [])\n    .push(fn);\n  return this;\n};\n\n/**\n * Adds an `event` listener that will be invoked a single\n * time then automatically removed.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.once \x3d function(event, fn){\n  var self \x3d this;\n  this._callbacks \x3d this._callbacks || {};\n\n  function on() {\n    self.off(event, on);\n    fn.apply(this, arguments);\n  }\n\n  on.fn \x3d fn;\n  this.on(event, on);\n  return this;\n};\n\n/**\n * Remove the given callback for `event` or all\n * registered callbacks.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.off \x3d\nEmitter.prototype.removeListener \x3d\nEmitter.prototype.removeAllListeners \x3d\nEmitter.prototype.removeEventListener \x3d function(event, fn){\n  this._callbacks \x3d this._callbacks || {};\n\n  // all\n  if (0 \x3d\x3d arguments.length) {\n    this._callbacks \x3d {};\n    return this;\n  }\n\n  // specific event\n  var callbacks \x3d this._callbacks[event];\n  if (!callbacks) return this;\n\n  // remove all handlers\n  if (1 \x3d\x3d arguments.length) {\n    delete this._callbacks[event];\n    return this;\n  }\n\n  // remove specific handler\n  var cb;\n  for (var i \x3d 0; i \x3c callbacks.length; i++) {\n    cb \x3d callbacks[i];\n    if (cb \x3d\x3d\x3d fn || cb.fn \x3d\x3d\x3d fn) {\n      callbacks.splice(i, 1);\n      break;\n    }\n  }\n  return this;\n};\n\n/**\n * Emit `event` with the given args.\n *\n * @param {String} event\n * @param {Mixed} ...\n * @return {Emitter}\n */\n\nEmitter.prototype.emit \x3d function(event){\n  this._callbacks \x3d this._callbacks || {};\n  var args \x3d [].slice.call(arguments, 1)\n    , callbacks \x3d this._callbacks[event];\n\n  if (callbacks) {\n    callbacks \x3d callbacks.slice(0);\n    for (var i \x3d 0, len \x3d callbacks.length; i \x3c len; ++i) {\n      callbacks[i].apply(this, args);\n    }\n  }\n\n  return this;\n};\n\n/**\n * Return array of callbacks for `event`.\n *\n * @param {String} event\n * @return {Array}\n * @api public\n */\n\nEmitter.prototype.listeners \x3d function(event){\n  this._callbacks \x3d this._callbacks || {};\n  return this._callbacks[event] || [];\n};\n\n/**\n * Check if this emitter has `event` handlers.\n *\n * @param {String} event\n * @return {Boolean}\n * @api public\n */\n\nEmitter.prototype.hasListeners \x3d function(event){\n  return !! this.listeners(event).length;\n};\n\n},{}],10:[function(_dereq_,module,exports){\n\n/**\n * Expose `debug()` as the module.\n */\n\nmodule.exports \x3d debug;\n\n/**\n * Create a debugger with the given `name`.\n *\n * @param {String} name\n * @return {Type}\n * @api public\n */\n\nfunction debug(name) {\n  if (!debug.enabled(name)) return function(){};\n\n  return function(fmt){\n    fmt \x3d coerce(fmt);\n\n    var curr \x3d new Date;\n    var ms \x3d curr - (debug[name] || curr);\n    debug[name] \x3d curr;\n\n    fmt \x3d name\n      + ' '\n      + fmt\n      + ' +' + debug.humanize(ms);\n\n    // This hackery is required for IE8\n    // where `console.log` doesn't have 'apply'\n    window.console\n      \x26\x26 console.log\n      \x26\x26 Function.prototype.apply.call(console.log, console, arguments);\n  }\n}\n\n/**\n * The currently active debug mode names.\n */\n\ndebug.names \x3d [];\ndebug.skips \x3d [];\n\n/**\n * Enables a debug mode by name. This can include modes\n * separated by a colon and wildcards.\n *\n * @param {String} name\n * @api public\n */\n\ndebug.enable \x3d function(name) {\n  try {\n    localStorage.debug \x3d name;\n  } catch(e){}\n\n  var split \x3d (name || '').split(/[\\s,]+/)\n    , len \x3d split.length;\n\n  for (var i \x3d 0; i \x3c len; i++) {\n    name \x3d split[i].replace('*', '.*?');\n    if (name[0] \x3d\x3d\x3d '-') {\n      debug.skips.push(new RegExp('^' + name.substr(1) + '$'));\n    }\n    else {\n      debug.names.push(new RegExp('^' + name + '$'));\n    }\n  }\n};\n\n/**\n * Disable debug output.\n *\n * @api public\n */\n\ndebug.disable \x3d function(){\n  debug.enable('');\n};\n\n/**\n * Humanize the given `ms`.\n *\n * @param {Number} m\n * @return {String}\n * @api private\n */\n\ndebug.humanize \x3d function(ms) {\n  var sec \x3d 1000\n    , min \x3d 60 * 1000\n    , hour \x3d 60 * min;\n\n  if (ms \x3e\x3d hour) return (ms / hour).toFixed(1) + 'h';\n  if (ms \x3e\x3d min) return (ms / min).toFixed(1) + 'm';\n  if (ms \x3e\x3d sec) return (ms / sec | 0) + 's';\n  return ms + 'ms';\n};\n\n/**\n * Returns true if the given mode name is enabled, false otherwise.\n *\n * @param {String} name\n * @return {Boolean}\n * @api public\n */\n\ndebug.enabled \x3d function(name) {\n  for (var i \x3d 0, len \x3d debug.skips.length; i \x3c len; i++) {\n    if (debug.skips[i].test(name)) {\n      return false;\n    }\n  }\n  for (var i \x3d 0, len \x3d debug.names.length; i \x3c len; i++) {\n    if (debug.names[i].test(name)) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * Coerce `val`.\n */\n\nfunction coerce(val) {\n  if (val instanceof Error) return val.stack || val.message;\n  return val;\n}\n\n// persist\n\ntry {\n  if (window.localStorage) debug.enable(localStorage.debug);\n} catch(e){}\n\n},{}],11:[function(_dereq_,module,exports){\n\nmodule.exports \x3d  _dereq_('./lib/');\n\n},{\"./lib/\":12}],12:[function(_dereq_,module,exports){\n\nmodule.exports \x3d _dereq_('./socket');\n\n/**\n * Exports parser\n *\n * @api public\n *\n */\nmodule.exports.parser \x3d _dereq_('engine.io-parser');\n\n},{\"./socket\":13,\"engine.io-parser\":25}],13:[function(_dereq_,module,exports){\n(function (global){\n/**\n * Module dependencies.\n */\n\nvar transports \x3d _dereq_('./transports');\nvar Emitter \x3d _dereq_('component-emitter');\nvar debug \x3d _dereq_('debug')('engine.io-client:socket');\nvar index \x3d _dereq_('indexof');\nvar parser \x3d _dereq_('engine.io-parser');\nvar parseuri \x3d _dereq_('parseuri');\nvar parsejson \x3d _dereq_('parsejson');\nvar parseqs \x3d _dereq_('parseqs');\n\n/**\n * Module exports.\n */\n\nmodule.exports \x3d Socket;\n\n/**\n * Noop function.\n *\n * @api private\n */\n\nfunction noop(){}\n\n/**\n * Socket constructor.\n *\n * @param {String|Object} uri or options\n * @param {Object} options\n * @api public\n */\n\nfunction Socket(uri, opts){\n  if (!(this instanceof Socket)) return new Socket(uri, opts);\n\n  opts \x3d opts || {};\n\n  if (uri \x26\x26 'object' \x3d\x3d typeof uri) {\n    opts \x3d uri;\n    uri \x3d null;\n  }\n\n  if (uri) {\n    uri \x3d parseuri(uri);\n    opts.host \x3d uri.host;\n    opts.secure \x3d uri.protocol \x3d\x3d 'https' || uri.protocol \x3d\x3d 'wss';\n    opts.port \x3d uri.port;\n    if (uri.query) opts.query \x3d uri.query;\n  }\n\n  this.secure \x3d null !\x3d opts.secure ? opts.secure :\n    (global.location \x26\x26 'https:' \x3d\x3d location.protocol);\n\n  if (opts.host) {\n    var pieces \x3d opts.host.split(':');\n    opts.hostname \x3d pieces.shift();\n    if (pieces.length) {\n      opts.port \x3d pieces.pop();\n    } else if (!opts.port) {\n      // if no port is specified manually, use the protocol default\n      opts.port \x3d this.secure ? '443' : '80';\n    }\n  }\n\n  this.agent \x3d opts.agent || false;\n  this.hostname \x3d opts.hostname ||\n    (global.location ? location.hostname : 'localhost');\n  this.port \x3d opts.port || (global.location \x26\x26 location.port ?\n       location.port :\n       (this.secure ? 443 : 80));\n  this.query \x3d opts.query || {};\n  if ('string' \x3d\x3d typeof this.query) this.query \x3d parseqs.decode(this.query);\n  this.upgrade \x3d false !\x3d\x3d opts.upgrade;\n  this.path \x3d (opts.path || '/engine.io').replace(/\\/$/, '') + '/';\n  this.forceJSONP \x3d !!opts.forceJSONP;\n  this.jsonp \x3d false !\x3d\x3d opts.jsonp;\n  this.forceBase64 \x3d !!opts.forceBase64;\n  this.enablesXDR \x3d !!opts.enablesXDR;\n  this.timestampParam \x3d opts.timestampParam || 't';\n  this.timestampRequests \x3d opts.timestampRequests;\n  this.transports \x3d opts.transports || ['polling', 'websocket'];\n  this.readyState \x3d '';\n  this.writeBuffer \x3d [];\n  this.callbackBuffer \x3d [];\n  this.policyPort \x3d opts.policyPort || 843;\n  this.rememberUpgrade \x3d opts.rememberUpgrade || false;\n  this.binaryType \x3d null;\n  this.onlyBinaryUpgrades \x3d opts.onlyBinaryUpgrades;\n\n  // SSL options for Node.js client\n  this.pfx \x3d opts.pfx || null;\n  this.key \x3d opts.key || null;\n  this.passphrase \x3d opts.passphrase || null;\n  this.cert \x3d opts.cert || null;\n  this.ca \x3d opts.ca || null;\n  this.ciphers \x3d opts.ciphers || null;\n  this.rejectUnauthorized \x3d opts.rejectUnauthorized || null;\n\n  this.open();\n}\n\nSocket.priorWebsocketSuccess \x3d false;\n\n/**\n * Mix in `Emitter`.\n */\n\nEmitter(Socket.prototype);\n\n/**\n * Protocol version.\n *\n * @api public\n */\n\nSocket.protocol \x3d parser.protocol; // this is an int\n\n/**\n * Expose deps for legacy compatibility\n * and standalone browser access.\n */\n\nSocket.Socket \x3d Socket;\nSocket.Transport \x3d _dereq_('./transport');\nSocket.transports \x3d _dereq_('./transports');\nSocket.parser \x3d _dereq_('engine.io-parser');\n\n/**\n * Creates transport of the given type.\n *\n * @param {String} transport name\n * @return {Transport}\n * @api private\n */\n\nSocket.prototype.createTransport \x3d function (name) {\n  debug('creating transport \"%s\"', name);\n  var query \x3d clone(this.query);\n\n  // append engine.io protocol identifier\n  query.EIO \x3d parser.protocol;\n\n  // transport name\n  query.transport \x3d name;\n\n  // session id if we already have one\n  if (this.id) query.sid \x3d this.id;\n\n  var transport \x3d new transports[name]({\n    agent: this.agent,\n    hostname: this.hostname,\n    port: this.port,\n    secure: this.secure,\n    path: this.path,\n    query: query,\n    forceJSONP: this.forceJSONP,\n    jsonp: this.jsonp,\n    forceBase64: this.forceBase64,\n    enablesXDR: this.enablesXDR,\n    timestampRequests: this.timestampRequests,\n    timestampParam: this.timestampParam,\n    policyPort: this.policyPort,\n    socket: this,\n    pfx: this.pfx,\n    key: this.key,\n    passphrase: this.passphrase,\n    cert: this.cert,\n    ca: this.ca,\n    ciphers: this.ciphers,\n    rejectUnauthorized: this.rejectUnauthorized\n  });\n\n  return transport;\n};\n\nfunction clone (obj) {\n  var o \x3d {};\n  for (var i in obj) {\n    if (obj.hasOwnProperty(i)) {\n      o[i] \x3d obj[i];\n    }\n  }\n  return o;\n}\n\n/**\n * Initializes transport to use and starts probe.\n *\n * @api private\n */\nSocket.prototype.open \x3d function () {\n  var transport;\n  if (this.rememberUpgrade \x26\x26 Socket.priorWebsocketSuccess \x26\x26 this.transports.indexOf('websocket') !\x3d -1) {\n    transport \x3d 'websocket';\n  } else if (0 \x3d\x3d this.transports.length) {\n    // Emit error on next tick so it can be listened to\n    var self \x3d this;\n    setTimeout(function() {\n      self.emit('error', 'No transports available');\n    }, 0);\n    return;\n  } else {\n    transport \x3d this.transports[0];\n  }\n  this.readyState \x3d 'opening';\n\n  // Retry with the next transport if the transport is disabled (jsonp: false)\n  var transport;\n  try {\n    transport \x3d this.createTransport(transport);\n  } catch (e) {\n    this.transports.shift();\n    this.open();\n    return;\n  }\n\n  transport.open();\n  this.setTransport(transport);\n};\n\n/**\n * Sets the current transport. Disables the existing one (if any).\n *\n * @api private\n */\n\nSocket.prototype.setTransport \x3d function(transport){\n  debug('setting transport %s', transport.name);\n  var self \x3d this;\n\n  if (this.transport) {\n    debug('clearing existing transport %s', this.transport.name);\n    this.transport.removeAllListeners();\n  }\n\n  // set up transport\n  this.transport \x3d transport;\n\n  // set up transport listeners\n  transport\n  .on('drain', function(){\n    self.onDrain();\n  })\n  .on('packet', function(packet){\n    self.onPacket(packet);\n  })\n  .on('error', function(e){\n    self.onError(e);\n  })\n  .on('close', function(){\n    self.onClose('transport close');\n  });\n};\n\n/**\n * Probes a transport.\n *\n * @param {String} transport name\n * @api private\n */\n\nSocket.prototype.probe \x3d function (name) {\n  debug('probing transport \"%s\"', name);\n  var transport \x3d this.createTransport(name, { probe: 1 })\n    , failed \x3d false\n    , self \x3d this;\n\n  Socket.priorWebsocketSuccess \x3d false;\n\n  function onTransportOpen(){\n    if (self.onlyBinaryUpgrades) {\n      var upgradeLosesBinary \x3d !this.supportsBinary \x26\x26 self.transport.supportsBinary;\n      failed \x3d failed || upgradeLosesBinary;\n    }\n    if (failed) return;\n\n    debug('probe transport \"%s\" opened', name);\n    transport.send([{ type: 'ping', data: 'probe' }]);\n    transport.once('packet', function (msg) {\n      if (failed) return;\n      if ('pong' \x3d\x3d msg.type \x26\x26 'probe' \x3d\x3d msg.data) {\n        debug('probe transport \"%s\" pong', name);\n        self.upgrading \x3d true;\n        self.emit('upgrading', transport);\n        if (!transport) return;\n        Socket.priorWebsocketSuccess \x3d 'websocket' \x3d\x3d transport.name;\n\n        debug('pausing current transport \"%s\"', self.transport.name);\n        self.transport.pause(function () {\n          if (failed) return;\n          if ('closed' \x3d\x3d self.readyState) return;\n          debug('changing transport and sending upgrade packet');\n\n          cleanup();\n\n          self.setTransport(transport);\n          transport.send([{ type: 'upgrade' }]);\n          self.emit('upgrade', transport);\n          transport \x3d null;\n          self.upgrading \x3d false;\n          self.flush();\n        });\n      } else {\n        debug('probe transport \"%s\" failed', name);\n        var err \x3d new Error('probe error');\n        err.transport \x3d transport.name;\n        self.emit('upgradeError', err);\n      }\n    });\n  }\n\n  function freezeTransport() {\n    if (failed) return;\n\n    // Any callback called by transport should be ignored since now\n    failed \x3d true;\n\n    cleanup();\n\n    transport.close();\n    transport \x3d null;\n  }\n\n  //Handle any error that happens while probing\n  function onerror(err) {\n    var error \x3d new Error('probe error: ' + err);\n    error.transport \x3d transport.name;\n\n    freezeTransport();\n\n    debug('probe transport \"%s\" failed because of error: %s', name, err);\n\n    self.emit('upgradeError', error);\n  }\n\n  function onTransportClose(){\n    onerror(\"transport closed\");\n  }\n\n  //When the socket is closed while we're probing\n  function onclose(){\n    onerror(\"socket closed\");\n  }\n\n  //When the socket is upgraded while we're probing\n  function onupgrade(to){\n    if (transport \x26\x26 to.name !\x3d transport.name) {\n      debug('\"%s\" works - aborting \"%s\"', to.name, transport.name);\n      freezeTransport();\n    }\n  }\n\n  //Remove all listeners on the transport and on self\n  function cleanup(){\n    transport.removeListener('open', onTransportOpen);\n    transport.removeListener('error', onerror);\n    transport.removeListener('close', onTransportClose);\n    self.removeListener('close', onclose);\n    self.removeListener('upgrading', onupgrade);\n  }\n\n  transport.once('open', onTransportOpen);\n  transport.once('error', onerror);\n  transport.once('close', onTransportClose);\n\n  this.once('close', onclose);\n  this.once('upgrading', onupgrade);\n\n  transport.open();\n\n};\n\n/**\n * Called when connection is deemed open.\n *\n * @api public\n */\n\nSocket.prototype.onOpen \x3d function () {\n  debug('socket open');\n  this.readyState \x3d 'open';\n  Socket.priorWebsocketSuccess \x3d 'websocket' \x3d\x3d this.transport.name;\n  this.emit('open');\n  this.flush();\n\n  // we check for `readyState` in case an `open`\n  // listener already closed the socket\n  if ('open' \x3d\x3d this.readyState \x26\x26 this.upgrade \x26\x26 this.transport.pause) {\n    debug('starting upgrade probes');\n    for (var i \x3d 0, l \x3d this.upgrades.length; i \x3c l; i++) {\n      this.probe(this.upgrades[i]);\n    }\n  }\n};\n\n/**\n * Handles a packet.\n *\n * @api private\n */\n\nSocket.prototype.onPacket \x3d function (packet) {\n  if ('opening' \x3d\x3d this.readyState || 'open' \x3d\x3d this.readyState) {\n    debug('socket receive: type \"%s\", data \"%s\"', packet.type, packet.data);\n\n    this.emit('packet', packet);\n\n    // Socket is live - any packet counts\n    this.emit('heartbeat');\n\n    switch (packet.type) {\n      case 'open':\n        this.onHandshake(parsejson(packet.data));\n        break;\n\n      case 'pong':\n        this.setPing();\n        break;\n\n      case 'error':\n        var err \x3d new Error('server error');\n        err.code \x3d packet.data;\n        this.emit('error', err);\n        break;\n\n      case 'message':\n        this.emit('data', packet.data);\n        this.emit('message', packet.data);\n        break;\n    }\n  } else {\n    debug('packet received with socket readyState \"%s\"', this.readyState);\n  }\n};\n\n/**\n * Called upon handshake completion.\n *\n * @param {Object} handshake obj\n * @api private\n */\n\nSocket.prototype.onHandshake \x3d function (data) {\n  this.emit('handshake', data);\n  this.id \x3d data.sid;\n  this.transport.query.sid \x3d data.sid;\n  this.upgrades \x3d this.filterUpgrades(data.upgrades);\n  this.pingInterval \x3d data.pingInterval;\n  this.pingTimeout \x3d data.pingTimeout;\n  this.onOpen();\n  // In case open handler closes socket\n  if  ('closed' \x3d\x3d this.readyState) return;\n  this.setPing();\n\n  // Prolong liveness of socket on heartbeat\n  this.removeListener('heartbeat', this.onHeartbeat);\n  this.on('heartbeat', this.onHeartbeat);\n};\n\n/**\n * Resets ping timeout.\n *\n * @api private\n */\n\nSocket.prototype.onHeartbeat \x3d function (timeout) {\n  clearTimeout(this.pingTimeoutTimer);\n  var self \x3d this;\n  self.pingTimeoutTimer \x3d setTimeout(function () {\n    if ('closed' \x3d\x3d self.readyState) return;\n    self.onClose('ping timeout');\n  }, timeout || (self.pingInterval + self.pingTimeout));\n};\n\n/**\n * Pings server every `this.pingInterval` and expects response\n * within `this.pingTimeout` or closes connection.\n *\n * @api private\n */\n\nSocket.prototype.setPing \x3d function () {\n  var self \x3d this;\n  clearTimeout(self.pingIntervalTimer);\n  self.pingIntervalTimer \x3d setTimeout(function () {\n    debug('writing ping packet - expecting pong within %sms', self.pingTimeout);\n    self.ping();\n    self.onHeartbeat(self.pingTimeout);\n  }, self.pingInterval);\n};\n\n/**\n* Sends a ping packet.\n*\n* @api public\n*/\n\nSocket.prototype.ping \x3d function () {\n  this.sendPacket('ping');\n};\n\n/**\n * Called on `drain` event\n *\n * @api private\n */\n\nSocket.prototype.onDrain \x3d function() {\n  for (var i \x3d 0; i \x3c this.prevBufferLen; i++) {\n    if (this.callbackBuffer[i]) {\n      this.callbackBuffer[i]();\n    }\n  }\n\n  this.writeBuffer.splice(0, this.prevBufferLen);\n  this.callbackBuffer.splice(0, this.prevBufferLen);\n\n  // setting prevBufferLen \x3d 0 is very important\n  // for example, when upgrading, upgrade packet is sent over,\n  // and a nonzero prevBufferLen could cause problems on `drain`\n  this.prevBufferLen \x3d 0;\n\n  if (this.writeBuffer.length \x3d\x3d 0) {\n    this.emit('drain');\n  } else {\n    this.flush();\n  }\n};\n\n/**\n * Flush write buffers.\n *\n * @api private\n */\n\nSocket.prototype.flush \x3d function () {\n  if ('closed' !\x3d this.readyState \x26\x26 this.transport.writable \x26\x26\n    !this.upgrading \x26\x26 this.writeBuffer.length) {\n    debug('flushing %d packets in socket', this.writeBuffer.length);\n    this.transport.send(this.writeBuffer);\n    // keep track of current length of writeBuffer\n    // splice writeBuffer and callbackBuffer on `drain`\n    this.prevBufferLen \x3d this.writeBuffer.length;\n    this.emit('flush');\n  }\n};\n\n/**\n * Sends a message.\n *\n * @param {String} message.\n * @param {Function} callback function.\n * @return {Socket} for chaining.\n * @api public\n */\n\nSocket.prototype.write \x3d\nSocket.prototype.send \x3d function (msg, fn) {\n  this.sendPacket('message', msg, fn);\n  return this;\n};\n\n/**\n * Sends a packet.\n *\n * @param {String} packet type.\n * @param {String} data.\n * @param {Function} callback function.\n * @api private\n */\n\nSocket.prototype.sendPacket \x3d function (type, data, fn) {\n  if ('closing' \x3d\x3d this.readyState || 'closed' \x3d\x3d this.readyState) {\n    return;\n  }\n\n  var packet \x3d { type: type, data: data };\n  this.emit('packetCreate', packet);\n  this.writeBuffer.push(packet);\n  this.callbackBuffer.push(fn);\n  this.flush();\n};\n\n/**\n * Closes the connection.\n *\n * @api private\n */\n\nSocket.prototype.close \x3d function () {\n  if ('opening' \x3d\x3d this.readyState || 'open' \x3d\x3d this.readyState) {\n    this.readyState \x3d 'closing';\n\n    var self \x3d this;\n\n    function close() {\n      self.onClose('forced close');\n      debug('socket closing - telling transport to close');\n      self.transport.close();\n    }\n\n    function cleanupAndClose() {\n      self.removeListener('upgrade', cleanupAndClose);\n      self.removeListener('upgradeError', cleanupAndClose);\n      close();\n    }\n\n    function waitForUpgrade() {\n      // wait for upgrade to finish since we can't send packets while pausing a transport\n      self.once('upgrade', cleanupAndClose);\n      self.once('upgradeError', cleanupAndClose);\n    }\n\n    if (this.writeBuffer.length) {\n      this.once('drain', function() {\n        if (this.upgrading) {\n          waitForUpgrade();\n        } else {\n          close();\n        }\n      });\n    } else if (this.upgrading) {\n      waitForUpgrade();\n    } else {\n      close();\n    }\n  }\n\n  return this;\n};\n\n/**\n * Called upon transport error\n *\n * @api private\n */\n\nSocket.prototype.onError \x3d function (err) {\n  debug('socket error %j', err);\n  Socket.priorWebsocketSuccess \x3d false;\n  this.emit('error', err);\n  this.onClose('transport error', err);\n};\n\n/**\n * Called upon transport close.\n *\n * @api private\n */\n\nSocket.prototype.onClose \x3d function (reason, desc) {\n  if ('opening' \x3d\x3d this.readyState || 'open' \x3d\x3d this.readyState || 'closing' \x3d\x3d this.readyState) {\n    debug('socket close with reason: \"%s\"', reason);\n    var self \x3d this;\n\n    // clear timers\n    clearTimeout(this.pingIntervalTimer);\n    clearTimeout(this.pingTimeoutTimer);\n\n    // clean buffers in next tick, so developers can still\n    // grab the buffers on `close` event\n    setTimeout(function() {\n      self.writeBuffer \x3d [];\n      self.callbackBuffer \x3d [];\n      self.prevBufferLen \x3d 0;\n    }, 0);\n\n    // stop event from firing again for transport\n    this.transport.removeAllListeners('close');\n\n    // ensure transport won't stay open\n    this.transport.close();\n\n    // ignore further transport communication\n    this.transport.removeAllListeners();\n\n    // set ready state\n    this.readyState \x3d 'closed';\n\n    // clear session id\n    this.id \x3d null;\n\n    // emit close event\n    this.emit('close', reason, desc);\n  }\n};\n\n/**\n * Filters upgrades, returning only those matching client transports.\n *\n * @param {Array} server upgrades\n * @api private\n *\n */\n\nSocket.prototype.filterUpgrades \x3d function (upgrades) {\n  var filteredUpgrades \x3d [];\n  for (var i \x3d 0, j \x3d upgrades.length; i\x3cj; i++) {\n    if (~index(this.transports, upgrades[i])) filteredUpgrades.push(upgrades[i]);\n  }\n  return filteredUpgrades;\n};\n\n}).call(this,typeof self !\x3d\x3d \"undefined\" ? self : typeof window !\x3d\x3d \"undefined\" ? window : {})\n},{\"./transport\":14,\"./transports\":15,\"component-emitter\":9,\"debug\":22,\"engine.io-parser\":25,\"indexof\":40,\"parsejson\":32,\"parseqs\":33,\"parseuri\":34}],14:[function(_dereq_,module,exports){\n/**\n * Module dependencies.\n */\n\nvar parser \x3d _dereq_('engine.io-parser');\nvar Emitter \x3d _dereq_('component-emitter');\n\n/**\n * Module exports.\n */\n\nmodule.exports \x3d Transport;\n\n/**\n * Transport abstract constructor.\n *\n * @param {Object} options.\n * @api private\n */\n\nfunction Transport (opts) {\n  this.path \x3d opts.path;\n  this.hostname \x3d opts.hostname;\n  this.port \x3d opts.port;\n  this.secure \x3d opts.secure;\n  this.query \x3d opts.query;\n  this.timestampParam \x3d opts.timestampParam;\n  this.timestampRequests \x3d opts.timestampRequests;\n  this.readyState \x3d '';\n  this.agent \x3d opts.agent || false;\n  this.socket \x3d opts.socket;\n  this.enablesXDR \x3d opts.enablesXDR;\n\n  // SSL options for Node.js client\n  this.pfx \x3d opts.pfx;\n  this.key \x3d opts.key;\n  this.passphrase \x3d opts.passphrase;\n  this.cert \x3d opts.cert;\n  this.ca \x3d opts.ca;\n  this.ciphers \x3d opts.ciphers;\n  this.rejectUnauthorized \x3d opts.rejectUnauthorized;\n}\n\n/**\n * Mix in `Emitter`.\n */\n\nEmitter(Transport.prototype);\n\n/**\n * A counter used to prevent collisions in the timestamps used\n * for cache busting.\n */\n\nTransport.timestamps \x3d 0;\n\n/**\n * Emits an error.\n *\n * @param {String} str\n * @return {Transport} for chaining\n * @api public\n */\n\nTransport.prototype.onError \x3d function (msg, desc) {\n  var err \x3d new Error(msg);\n  err.type \x3d 'TransportError';\n  err.description \x3d desc;\n  this.emit('error', err);\n  return this;\n};\n\n/**\n * Opens the transport.\n *\n * @api public\n */\n\nTransport.prototype.open \x3d function () {\n  if ('closed' \x3d\x3d this.readyState || '' \x3d\x3d this.readyState) {\n    this.readyState \x3d 'opening';\n    this.doOpen();\n  }\n\n  return this;\n};\n\n/**\n * Closes the transport.\n *\n * @api private\n */\n\nTransport.prototype.close \x3d function () {\n  if ('opening' \x3d\x3d this.readyState || 'open' \x3d\x3d this.readyState) {\n    this.doClose();\n    this.onClose();\n  }\n\n  return this;\n};\n\n/**\n * Sends multiple packets.\n *\n * @param {Array} packets\n * @api private\n */\n\nTransport.prototype.send \x3d function(packets){\n  if ('open' \x3d\x3d this.readyState) {\n    this.write(packets);\n  } else {\n    throw new Error('Transport not open');\n  }\n};\n\n/**\n * Called upon open\n *\n * @api private\n */\n\nTransport.prototype.onOpen \x3d function () {\n  this.readyState \x3d 'open';\n  this.writable \x3d true;\n  this.emit('open');\n};\n\n/**\n * Called with data.\n *\n * @param {String} data\n * @api private\n */\n\nTransport.prototype.onData \x3d function(data){\n  var packet \x3d parser.decodePacket(data, this.socket.binaryType);\n  this.onPacket(packet);\n};\n\n/**\n * Called with a decoded packet.\n */\n\nTransport.prototype.onPacket \x3d function (packet) {\n  this.emit('packet', packet);\n};\n\n/**\n * Called upon close.\n *\n * @api private\n */\n\nTransport.prototype.onClose \x3d function () {\n  this.readyState \x3d 'closed';\n  this.emit('close');\n};\n\n},{\"component-emitter\":9,\"engine.io-parser\":25}],15:[function(_dereq_,module,exports){\n(function (global){\n/**\n * Module dependencies\n */\n\nvar XMLHttpRequest \x3d _dereq_('xmlhttprequest');\nvar XHR \x3d _dereq_('./polling-xhr');\nvar JSONP \x3d _dereq_('./polling-jsonp');\nvar websocket \x3d _dereq_('./websocket');\n\n/**\n * Export transports.\n */\n\nexports.polling \x3d polling;\nexports.websocket \x3d websocket;\n\n/**\n * Polling transport polymorphic constructor.\n * Decides on xhr vs jsonp based on feature detection.\n *\n * @api private\n */\n\nfunction polling(opts){\n  var xhr;\n  var xd \x3d false;\n  var xs \x3d false;\n  var jsonp \x3d false !\x3d\x3d opts.jsonp;\n\n  if (global.location) {\n    var isSSL \x3d 'https:' \x3d\x3d location.protocol;\n    var port \x3d location.port;\n\n    // some user agents have empty `location.port`\n    if (!port) {\n      port \x3d isSSL ? 443 : 80;\n    }\n\n    xd \x3d opts.hostname !\x3d location.hostname || port !\x3d opts.port;\n    xs \x3d opts.secure !\x3d isSSL;\n  }\n\n  opts.xdomain \x3d xd;\n  opts.xscheme \x3d xs;\n  xhr \x3d new XMLHttpRequest(opts);\n\n  if ('open' in xhr \x26\x26 !opts.forceJSONP) {\n    return new XHR(opts);\n  } else {\n    if (!jsonp) throw new Error('JSONP disabled');\n    return new JSONP(opts);\n  }\n}\n\n}).call(this,typeof self !\x3d\x3d \"undefined\" ? self : typeof window !\x3d\x3d \"undefined\" ? window : {})\n},{\"./polling-jsonp\":16,\"./polling-xhr\":17,\"./websocket\":19,\"xmlhttprequest\":20}],16:[function(_dereq_,module,exports){\n(function (global){\n\n/**\n * Module requirements.\n */\n\nvar Polling \x3d _dereq_('./polling');\nvar inherit \x3d _dereq_('component-inherit');\n\n/**\n * Module exports.\n */\n\nmodule.exports \x3d JSONPPolling;\n\n/**\n * Cached regular expressions.\n */\n\nvar rNewline \x3d /\\n/g;\nvar rEscapedNewline \x3d /\\\\n/g;\n\n/**\n * Global JSONP callbacks.\n */\n\nvar callbacks;\n\n/**\n * Callbacks count.\n */\n\nvar index \x3d 0;\n\n/**\n * Noop.\n */\n\nfunction empty () { }\n\n/**\n * JSONP Polling constructor.\n *\n * @param {Object} opts.\n * @api public\n */\n\nfunction JSONPPolling (opts) {\n  Polling.call(this, opts);\n\n  this.query \x3d this.query || {};\n\n  // define global callbacks array if not present\n  // we do this here (lazily) to avoid unneeded global pollution\n  if (!callbacks) {\n    // we need to consider multiple engines in the same page\n    if (!global.___eio) global.___eio \x3d [];\n    callbacks \x3d global.___eio;\n  }\n\n  // callback identifier\n  this.index \x3d callbacks.length;\n\n  // add callback to jsonp global\n  var self \x3d this;\n  callbacks.push(function (msg) {\n    self.onData(msg);\n  });\n\n  // append to query string\n  this.query.j \x3d this.index;\n\n  // prevent spurious errors from being emitted when the window is unloaded\n  if (global.document \x26\x26 global.addEventListener) {\n    global.addEventListener('beforeunload', function () {\n      if (self.script) self.script.onerror \x3d empty;\n    }, false);\n  }\n}\n\n/**\n * Inherits from Polling.\n */\n\ninherit(JSONPPolling, Polling);\n\n/*\n * JSONP only supports binary as base64 encoded strings\n */\n\nJSONPPolling.prototype.supportsBinary \x3d false;\n\n/**\n * Closes the socket.\n *\n * @api private\n */\n\nJSONPPolling.prototype.doClose \x3d function () {\n  if (this.script) {\n    this.script.parentNode.removeChild(this.script);\n    this.script \x3d null;\n  }\n\n  if (this.form) {\n    this.form.parentNode.removeChild(this.form);\n    this.form \x3d null;\n    this.iframe \x3d null;\n  }\n\n  Polling.prototype.doClose.call(this);\n};\n\n/**\n * Starts a poll cycle.\n *\n * @api private\n */\n\nJSONPPolling.prototype.doPoll \x3d function () {\n  var self \x3d this;\n  var script \x3d document.createElement('script');\n\n  if (this.script) {\n    this.script.parentNode.removeChild(this.script);\n    this.script \x3d null;\n  }\n\n  script.async \x3d true;\n  script.src \x3d this.uri();\n  script.onerror \x3d function(e){\n    self.onError('jsonp poll error',e);\n  };\n\n  var insertAt \x3d document.getElementsByTagName('script')[0];\n  insertAt.parentNode.insertBefore(script, insertAt);\n  this.script \x3d script;\n\n  var isUAgecko \x3d 'undefined' !\x3d typeof navigator \x26\x26 /gecko/i.test(navigator.userAgent);\n  \n  if (isUAgecko) {\n    setTimeout(function () {\n      var iframe \x3d document.createElement('iframe');\n      document.body.appendChild(iframe);\n      document.body.removeChild(iframe);\n    }, 100);\n  }\n};\n\n/**\n * Writes with a hidden iframe.\n *\n * @param {String} data to send\n * @param {Function} called upon flush.\n * @api private\n */\n\nJSONPPolling.prototype.doWrite \x3d function (data, fn) {\n  var self \x3d this;\n\n  if (!this.form) {\n    var form \x3d document.createElement('form');\n    var area \x3d document.createElement('textarea');\n    var id \x3d this.iframeId \x3d 'eio_iframe_' + this.index;\n    var iframe;\n\n    form.className \x3d 'socketio';\n    form.style.position \x3d 'absolute';\n    form.style.top \x3d '-1000px';\n    form.style.left \x3d '-1000px';\n    form.target \x3d id;\n    form.method \x3d 'POST';\n    form.setAttribute('accept-charset', 'utf-8');\n    area.name \x3d 'd';\n    form.appendChild(area);\n    document.body.appendChild(form);\n\n    this.form \x3d form;\n    this.area \x3d area;\n  }\n\n  this.form.action \x3d this.uri();\n\n  function complete () {\n    initIframe();\n    fn();\n  }\n\n  function initIframe () {\n    if (self.iframe) {\n      try {\n        self.form.removeChild(self.iframe);\n      } catch (e) {\n        self.onError('jsonp polling iframe removal error', e);\n      }\n    }\n\n    try {\n      // ie6 dynamic iframes with target\x3d\"\" support (thanks Chris Lambacher)\n      var html \x3d '\x3ciframe src\x3d\"javascript:0\" name\x3d\"'+ self.iframeId +'\"\x3e';\n      iframe \x3d document.createElement(html);\n    } catch (e) {\n      iframe \x3d document.createElement('iframe');\n      iframe.name \x3d self.iframeId;\n      iframe.src \x3d 'javascript:0';\n    }\n\n    iframe.id \x3d self.iframeId;\n\n    self.form.appendChild(iframe);\n    self.iframe \x3d iframe;\n  }\n\n  initIframe();\n\n  // escape \\n to prevent it from being converted into \\r\\n by some UAs\n  // double escaping is required for escaped new lines because unescaping of new lines can be done safely on server-side\n  data \x3d data.replace(rEscapedNewline, '\\\\\\n');\n  this.area.value \x3d data.replace(rNewline, '\\\\n');\n\n  try {\n    this.form.submit();\n  } catch(e) {}\n\n  if (this.iframe.attachEvent) {\n    this.iframe.onreadystatechange \x3d function(){\n      if (self.iframe.readyState \x3d\x3d 'complete') {\n        complete();\n      }\n    };\n  } else {\n    this.iframe.onload \x3d complete;\n  }\n};\n\n}).call(this,typeof self !\x3d\x3d \"undefined\" ? self : typeof window !\x3d\x3d \"undefined\" ? window : {})\n},{\"./polling\":18,\"component-inherit\":21}],17:[function(_dereq_,module,exports){\n(function (global){\n/**\n * Module requirements.\n */\n\nvar XMLHttpRequest \x3d _dereq_('xmlhttprequest');\nvar Polling \x3d _dereq_('./polling');\nvar Emitter \x3d _dereq_('component-emitter');\nvar inherit \x3d _dereq_('component-inherit');\nvar debug \x3d _dereq_('debug')('engine.io-client:polling-xhr');\n\n/**\n * Module exports.\n */\n\nmodule.exports \x3d XHR;\nmodule.exports.Request \x3d Request;\n\n/**\n * Empty function\n */\n\nfunction empty(){}\n\n/**\n * XHR Polling constructor.\n *\n * @param {Object} opts\n * @api public\n */\n\nfunction XHR(opts){\n  Polling.call(this, opts);\n\n  if (global.location) {\n    var isSSL \x3d 'https:' \x3d\x3d location.protocol;\n    var port \x3d location.port;\n\n    // some user agents have empty `location.port`\n    if (!port) {\n      port \x3d isSSL ? 443 : 80;\n    }\n\n    this.xd \x3d opts.hostname !\x3d global.location.hostname ||\n      port !\x3d opts.port;\n    this.xs \x3d opts.secure !\x3d isSSL;\n  }\n}\n\n/**\n * Inherits from Polling.\n */\n\ninherit(XHR, Polling);\n\n/**\n * XHR supports binary\n */\n\nXHR.prototype.supportsBinary \x3d true;\n\n/**\n * Creates a request.\n *\n * @param {String} method\n * @api private\n */\n\nXHR.prototype.request \x3d function(opts){\n  opts \x3d opts || {};\n  opts.uri \x3d this.uri();\n  opts.xd \x3d this.xd;\n  opts.xs \x3d this.xs;\n  opts.agent \x3d this.agent || false;\n  opts.supportsBinary \x3d this.supportsBinary;\n  opts.enablesXDR \x3d this.enablesXDR;\n\n  // SSL options for Node.js client\n  opts.pfx \x3d this.pfx;\n  opts.key \x3d this.key;\n  opts.passphrase \x3d this.passphrase;\n  opts.cert \x3d this.cert;\n  opts.ca \x3d this.ca;\n  opts.ciphers \x3d this.ciphers;\n  opts.rejectUnauthorized \x3d this.rejectUnauthorized;\n\n  return new Request(opts);\n};\n\n/**\n * Sends data.\n *\n * @param {String} data to send.\n * @param {Function} called upon flush.\n * @api private\n */\n\nXHR.prototype.doWrite \x3d function(data, fn){\n  var isBinary \x3d typeof data !\x3d\x3d 'string' \x26\x26 data !\x3d\x3d undefined;\n  var req \x3d this.request({ method: 'POST', data: data, isBinary: isBinary });\n  var self \x3d this;\n  req.on('success', fn);\n  req.on('error', function(err){\n    self.onError('xhr post error', err);\n  });\n  this.sendXhr \x3d req;\n};\n\n/**\n * Starts a poll cycle.\n *\n * @api private\n */\n\nXHR.prototype.doPoll \x3d function(){\n  debug('xhr poll');\n  var req \x3d this.request();\n  var self \x3d this;\n  req.on('data', function(data){\n    self.onData(data);\n  });\n  req.on('error', function(err){\n    self.onError('xhr poll error', err);\n  });\n  this.pollXhr \x3d req;\n};\n\n/**\n * Request constructor\n *\n * @param {Object} options\n * @api public\n */\n\nfunction Request(opts){\n  this.method \x3d opts.method || 'GET';\n  this.uri \x3d opts.uri;\n  this.xd \x3d !!opts.xd;\n  this.xs \x3d !!opts.xs;\n  this.async \x3d false !\x3d\x3d opts.async;\n  this.data \x3d undefined !\x3d opts.data ? opts.data : null;\n  this.agent \x3d opts.agent;\n  this.isBinary \x3d opts.isBinary;\n  this.supportsBinary \x3d opts.supportsBinary;\n  this.enablesXDR \x3d opts.enablesXDR;\n\n  // SSL options for Node.js client\n  this.pfx \x3d opts.pfx;\n  this.key \x3d opts.key;\n  this.passphrase \x3d opts.passphrase;\n  this.cert \x3d opts.cert;\n  this.ca \x3d opts.ca;\n  this.ciphers \x3d opts.ciphers;\n  this.rejectUnauthorized \x3d opts.rejectUnauthorized;\n\n  this.create();\n}\n\n/**\n * Mix in `Emitter`.\n */\n\nEmitter(Request.prototype);\n\n/**\n * Creates the XHR object and sends the request.\n *\n * @api private\n */\n\nRequest.prototype.create \x3d function(){\n  var opts \x3d { agent: this.agent, xdomain: this.xd, xscheme: this.xs, enablesXDR: this.enablesXDR };\n\n  // SSL options for Node.js client\n  opts.pfx \x3d this.pfx;\n  opts.key \x3d this.key;\n  opts.passphrase \x3d this.passphrase;\n  opts.cert \x3d this.cert;\n  opts.ca \x3d this.ca;\n  opts.ciphers \x3d this.ciphers;\n  opts.rejectUnauthorized \x3d this.rejectUnauthorized;\n\n  var xhr \x3d this.xhr \x3d new XMLHttpRequest(opts);\n  var self \x3d this;\n\n  try {\n    debug('xhr open %s: %s', this.method, this.uri);\n    xhr.open(this.method, this.uri, this.async);\n    if (this.supportsBinary) {\n      // This has to be done after open because Firefox is stupid\n      // http://stackoverflow.com/questions/13216903/get-binary-data-with-xmlhttprequest-in-a-firefox-extension\n      xhr.responseType \x3d 'arraybuffer';\n    }\n\n    if ('POST' \x3d\x3d this.method) {\n      try {\n        if (this.isBinary) {\n          xhr.setRequestHeader('Content-type', 'application/octet-stream');\n        } else {\n          xhr.setRequestHeader('Content-type', 'text/plain;charset\x3dUTF-8');\n        }\n      } catch (e) {}\n    }\n\n    // ie6 check\n    if ('withCredentials' in xhr) {\n      xhr.withCredentials \x3d true;\n    }\n\n    if (this.hasXDR()) {\n      xhr.onload \x3d function(){\n        self.onLoad();\n      };\n      xhr.onerror \x3d function(){\n        self.onError(xhr.responseText);\n      };\n    } else {\n      xhr.onreadystatechange \x3d function(){\n        if (4 !\x3d xhr.readyState) return;\n        if (200 \x3d\x3d xhr.status || 1223 \x3d\x3d xhr.status) {\n          self.onLoad();\n        } else {\n          // make sure the `error` event handler that's user-set\n          // does not throw in the same tick and gets caught here\n          setTimeout(function(){\n            self.onError(xhr.status);\n          }, 0);\n        }\n      };\n    }\n\n    debug('xhr data %s', this.data);\n    xhr.send(this.data);\n  } catch (e) {\n    // Need to defer since .create() is called directly fhrom the constructor\n    // and thus the 'error' event can only be only bound *after* this exception\n    // occurs.  Therefore, also, we cannot throw here at all.\n    setTimeout(function() {\n      self.onError(e);\n    }, 0);\n    return;\n  }\n\n  if (global.document) {\n    this.index \x3d Request.requestsCount++;\n    Request.requests[this.index] \x3d this;\n  }\n};\n\n/**\n * Called upon successful response.\n *\n * @api private\n */\n\nRequest.prototype.onSuccess \x3d function(){\n  this.emit('success');\n  this.cleanup();\n};\n\n/**\n * Called if we have data.\n *\n * @api private\n */\n\nRequest.prototype.onData \x3d function(data){\n  this.emit('data', data);\n  this.onSuccess();\n};\n\n/**\n * Called upon error.\n *\n * @api private\n */\n\nRequest.prototype.onError \x3d function(err){\n  this.emit('error', err);\n  this.cleanup(true);\n};\n\n/**\n * Cleans up house.\n *\n * @api private\n */\n\nRequest.prototype.cleanup \x3d function(fromError){\n  if ('undefined' \x3d\x3d typeof this.xhr || null \x3d\x3d\x3d this.xhr) {\n    return;\n  }\n  // xmlhttprequest\n  if (this.hasXDR()) {\n    this.xhr.onload \x3d this.xhr.onerror \x3d empty;\n  } else {\n    this.xhr.onreadystatechange \x3d empty;\n  }\n\n  if (fromError) {\n    try {\n      this.xhr.abort();\n    } catch(e) {}\n  }\n\n  if (global.document) {\n    delete Request.requests[this.index];\n  }\n\n  this.xhr \x3d null;\n};\n\n/**\n * Called upon load.\n *\n * @api private\n */\n\nRequest.prototype.onLoad \x3d function(){\n  var data;\n  try {\n    var contentType;\n    try {\n      contentType \x3d this.xhr.getResponseHeader('Content-Type').split(';')[0];\n    } catch (e) {}\n    if (contentType \x3d\x3d\x3d 'application/octet-stream') {\n      data \x3d this.xhr.response;\n    } else {\n      if (!this.supportsBinary) {\n        data \x3d this.xhr.responseText;\n      } else {\n        data \x3d 'ok';\n      }\n    }\n  } catch (e) {\n    this.onError(e);\n  }\n  if (null !\x3d data) {\n    this.onData(data);\n  }\n};\n\n/**\n * Check if it has XDomainRequest.\n *\n * @api private\n */\n\nRequest.prototype.hasXDR \x3d function(){\n  return 'undefined' !\x3d\x3d typeof global.XDomainRequest \x26\x26 !this.xs \x26\x26 this.enablesXDR;\n};\n\n/**\n * Aborts the request.\n *\n * @api public\n */\n\nRequest.prototype.abort \x3d function(){\n  this.cleanup();\n};\n\n/**\n * Aborts pending requests when unloading the window. This is needed to prevent\n * memory leaks (e.g. when using IE) and to ensure that no spurious error is\n * emitted.\n */\n\nif (global.document) {\n  Request.requestsCount \x3d 0;\n  Request.requests \x3d {};\n  if (global.attachEvent) {\n    global.attachEvent('onunload', unloadHandler);\n  } else if (global.addEventListener) {\n    global.addEventListener('beforeunload', unloadHandler, false);\n  }\n}\n\nfunction unloadHandler() {\n  for (var i in Request.requests) {\n    if (Request.requests.hasOwnProperty(i)) {\n      Request.requests[i].abort();\n    }\n  }\n}\n\n}).call(this,typeof self !\x3d\x3d \"undefined\" ? self : typeof window !\x3d\x3d \"undefined\" ? window : {})\n},{\"./polling\":18,\"component-emitter\":9,\"component-inherit\":21,\"debug\":22,\"xmlhttprequest\":20}],18:[function(_dereq_,module,exports){\n/**\n * Module dependencies.\n */\n\nvar Transport \x3d _dereq_('../transport');\nvar parseqs \x3d _dereq_('parseqs');\nvar parser \x3d _dereq_('engine.io-parser');\nvar inherit \x3d _dereq_('component-inherit');\nvar debug \x3d _dereq_('debug')('engine.io-client:polling');\n\n/**\n * Module exports.\n */\n\nmodule.exports \x3d Polling;\n\n/**\n * Is XHR2 supported?\n */\n\nvar hasXHR2 \x3d (function() {\n  var XMLHttpRequest \x3d _dereq_('xmlhttprequest');\n  var xhr \x3d new XMLHttpRequest({ xdomain: false });\n  return null !\x3d xhr.responseType;\n})();\n\n/**\n * Polling interface.\n *\n * @param {Object} opts\n * @api private\n */\n\nfunction Polling(opts){\n  var forceBase64 \x3d (opts \x26\x26 opts.forceBase64);\n  if (!hasXHR2 || forceBase64) {\n    this.supportsBinary \x3d false;\n  }\n  Transport.call(this, opts);\n}\n\n/**\n * Inherits from Transport.\n */\n\ninherit(Polling, Transport);\n\n/**\n * Transport name.\n */\n\nPolling.prototype.name \x3d 'polling';\n\n/**\n * Opens the socket (triggers polling). We write a PING message to determine\n * when the transport is open.\n *\n * @api private\n */\n\nPolling.prototype.doOpen \x3d function(){\n  this.poll();\n};\n\n/**\n * Pauses polling.\n *\n * @param {Function} callback upon buffers are flushed and transport is paused\n * @api private\n */\n\nPolling.prototype.pause \x3d function(onPause){\n  var pending \x3d 0;\n  var self \x3d this;\n\n  this.readyState \x3d 'pausing';\n\n  function pause(){\n    debug('paused');\n    self.readyState \x3d 'paused';\n    onPause();\n  }\n\n  if (this.polling || !this.writable) {\n    var total \x3d 0;\n\n    if (this.polling) {\n      debug('we are currently polling - waiting to pause');\n      total++;\n      this.once('pollComplete', function(){\n        debug('pre-pause polling complete');\n        --total || pause();\n      });\n    }\n\n    if (!this.writable) {\n      debug('we are currently writing - waiting to pause');\n      total++;\n      this.once('drain', function(){\n        debug('pre-pause writing complete');\n        --total || pause();\n      });\n    }\n  } else {\n    pause();\n  }\n};\n\n/**\n * Starts polling cycle.\n *\n * @api public\n */\n\nPolling.prototype.poll \x3d function(){\n  debug('polling');\n  this.polling \x3d true;\n  this.doPoll();\n  this.emit('poll');\n};\n\n/**\n * Overloads onData to detect payloads.\n *\n * @api private\n */\n\nPolling.prototype.onData \x3d function(data){\n  var self \x3d this;\n  debug('polling got data %s', data);\n  var callback \x3d function(packet, index, total) {\n    // if its the first message we consider the transport open\n    if ('opening' \x3d\x3d self.readyState) {\n      self.onOpen();\n    }\n\n    // if its a close packet, we close the ongoing requests\n    if ('close' \x3d\x3d packet.type) {\n      self.onClose();\n      return false;\n    }\n\n    // otherwise bypass onData and handle the message\n    self.onPacket(packet);\n  };\n\n  // decode payload\n  parser.decodePayload(data, this.socket.binaryType, callback);\n\n  // if an event did not trigger closing\n  if ('closed' !\x3d this.readyState) {\n    // if we got data we're not polling\n    this.polling \x3d false;\n    this.emit('pollComplete');\n\n    if ('open' \x3d\x3d this.readyState) {\n      this.poll();\n    } else {\n      debug('ignoring poll - transport state \"%s\"', this.readyState);\n    }\n  }\n};\n\n/**\n * For polling, send a close packet.\n *\n * @api private\n */\n\nPolling.prototype.doClose \x3d function(){\n  var self \x3d this;\n\n  function close(){\n    debug('writing close packet');\n    self.write([{ type: 'close' }]);\n  }\n\n  if ('open' \x3d\x3d this.readyState) {\n    debug('transport open - closing');\n    close();\n  } else {\n    // in case we're trying to close while\n    // handshaking is in progress (GH-164)\n    debug('transport not open - deferring close');\n    this.once('open', close);\n  }\n};\n\n/**\n * Writes a packets payload.\n *\n * @param {Array} data packets\n * @param {Function} drain callback\n * @api private\n */\n\nPolling.prototype.write \x3d function(packets){\n  var self \x3d this;\n  this.writable \x3d false;\n  var callbackfn \x3d function() {\n    self.writable \x3d true;\n    self.emit('drain');\n  };\n\n  var self \x3d this;\n  parser.encodePayload(packets, this.supportsBinary, function(data) {\n    self.doWrite(data, callbackfn);\n  });\n};\n\n/**\n * Generates uri for connection.\n *\n * @api private\n */\n\nPolling.prototype.uri \x3d function(){\n  var query \x3d this.query || {};\n  var schema \x3d this.secure ? 'https' : 'http';\n  var port \x3d '';\n\n  // cache busting is forced\n  if (false !\x3d\x3d this.timestampRequests) {\n    query[this.timestampParam] \x3d +new Date + '-' + Transport.timestamps++;\n  }\n\n  if (!this.supportsBinary \x26\x26 !query.sid) {\n    query.b64 \x3d 1;\n  }\n\n  query \x3d parseqs.encode(query);\n\n  // avoid port if default for schema\n  if (this.port \x26\x26 (('https' \x3d\x3d schema \x26\x26 this.port !\x3d 443) ||\n     ('http' \x3d\x3d schema \x26\x26 this.port !\x3d 80))) {\n    port \x3d ':' + this.port;\n  }\n\n  // prepend ? to query\n  if (query.length) {\n    query \x3d '?' + query;\n  }\n\n  return schema + '://' + this.hostname + port + this.path + query;\n};\n\n},{\"../transport\":14,\"component-inherit\":21,\"debug\":22,\"engine.io-parser\":25,\"parseqs\":33,\"xmlhttprequest\":20}],19:[function(_dereq_,module,exports){\n/**\n * Module dependencies.\n */\n\nvar Transport \x3d _dereq_('../transport');\nvar parser \x3d _dereq_('engine.io-parser');\nvar parseqs \x3d _dereq_('parseqs');\nvar inherit \x3d _dereq_('component-inherit');\nvar debug \x3d _dereq_('debug')('engine.io-client:websocket');\n\n/**\n * `ws` exposes a WebSocket-compatible interface in\n * Node, or the `WebSocket` or `MozWebSocket` globals\n * in the browser.\n */\n\nvar WebSocket \x3d _dereq_('ws');\n\n/**\n * Module exports.\n */\n\nmodule.exports \x3d WS;\n\n/**\n * WebSocket transport constructor.\n *\n * @api {Object} connection options\n * @api public\n */\n\nfunction WS(opts){\n  var forceBase64 \x3d (opts \x26\x26 opts.forceBase64);\n  if (forceBase64) {\n    this.supportsBinary \x3d false;\n  }\n  Transport.call(this, opts);\n}\n\n/**\n * Inherits from Transport.\n */\n\ninherit(WS, Transport);\n\n/**\n * Transport name.\n *\n * @api public\n */\n\nWS.prototype.name \x3d 'websocket';\n\n/*\n * WebSockets support binary\n */\n\nWS.prototype.supportsBinary \x3d true;\n\n/**\n * Opens socket.\n *\n * @api private\n */\n\nWS.prototype.doOpen \x3d function(){\n  if (!this.check()) {\n    // let probe timeout\n    return;\n  }\n\n  var self \x3d this;\n  var uri \x3d this.uri();\n  var protocols \x3d void(0);\n  var opts \x3d { agent: this.agent };\n\n  // SSL options for Node.js client\n  opts.pfx \x3d this.pfx;\n  opts.key \x3d this.key;\n  opts.passphrase \x3d this.passphrase;\n  opts.cert \x3d this.cert;\n  opts.ca \x3d this.ca;\n  opts.ciphers \x3d this.ciphers;\n  opts.rejectUnauthorized \x3d this.rejectUnauthorized;\n\n  this.ws \x3d new WebSocket(uri, protocols, opts);\n\n  if (this.ws.binaryType \x3d\x3d\x3d undefined) {\n    this.supportsBinary \x3d false;\n  }\n\n  this.ws.binaryType \x3d 'arraybuffer';\n  this.addEventListeners();\n};\n\n/**\n * Adds event listeners to the socket\n *\n * @api private\n */\n\nWS.prototype.addEventListeners \x3d function(){\n  var self \x3d this;\n\n  this.ws.onopen \x3d function(){\n    self.onOpen();\n  };\n  this.ws.onclose \x3d function(){\n    self.onClose();\n  };\n  this.ws.onmessage \x3d function(ev){\n    self.onData(ev.data);\n  };\n  this.ws.onerror \x3d function(e){\n    self.onError('websocket error', e);\n  };\n};\n\n/**\n * Override `onData` to use a timer on iOS.\n * See: https://gist.github.com/mloughran/2052006\n *\n * @api private\n */\n\nif ('undefined' !\x3d typeof navigator\n  \x26\x26 /iPad|iPhone|iPod/i.test(navigator.userAgent)) {\n  WS.prototype.onData \x3d function(data){\n    var self \x3d this;\n    setTimeout(function(){\n      Transport.prototype.onData.call(self, data);\n    }, 0);\n  };\n}\n\n/**\n * Writes data to socket.\n *\n * @param {Array} array of packets.\n * @api private\n */\n\nWS.prototype.write \x3d function(packets){\n  var self \x3d this;\n  this.writable \x3d false;\n  // encodePacket efficient as it uses WS framing\n  // no need for encodePayload\n  for (var i \x3d 0, l \x3d packets.length; i \x3c l; i++) {\n    parser.encodePacket(packets[i], this.supportsBinary, function(data) {\n      //Sometimes the websocket has already been closed but the browser didn't\n      //have a chance of informing us about it yet, in that case send will\n      //throw an error\n      try {\n        self.ws.send(data);\n      } catch (e){\n        debug('websocket closed before onclose event');\n      }\n    });\n  }\n\n  function ondrain() {\n    self.writable \x3d true;\n    self.emit('drain');\n  }\n  // fake drain\n  // defer to next tick to allow Socket to clear writeBuffer\n  setTimeout(ondrain, 0);\n};\n\n/**\n * Called upon close\n *\n * @api private\n */\n\nWS.prototype.onClose \x3d function(){\n  Transport.prototype.onClose.call(this);\n};\n\n/**\n * Closes socket.\n *\n * @api private\n */\n\nWS.prototype.doClose \x3d function(){\n  if (typeof this.ws !\x3d\x3d 'undefined') {\n    this.ws.close();\n  }\n};\n\n/**\n * Generates uri for connection.\n *\n * @api private\n */\n\nWS.prototype.uri \x3d function(){\n  var query \x3d this.query || {};\n  var schema \x3d this.secure ? 'wss' : 'ws';\n  var port \x3d '';\n\n  // avoid port if default for schema\n  if (this.port \x26\x26 (('wss' \x3d\x3d schema \x26\x26 this.port !\x3d 443)\n    || ('ws' \x3d\x3d schema \x26\x26 this.port !\x3d 80))) {\n    port \x3d ':' + this.port;\n  }\n\n  // append timestamp to URI\n  if (this.timestampRequests) {\n    query[this.timestampParam] \x3d +new Date;\n  }\n\n  // communicate binary support capabilities\n  if (!this.supportsBinary) {\n    query.b64 \x3d 1;\n  }\n\n  query \x3d parseqs.encode(query);\n\n  // prepend ? to query\n  if (query.length) {\n    query \x3d '?' + query;\n  }\n\n  return schema + '://' + this.hostname + port + this.path + query;\n};\n\n/**\n * Feature detection for WebSocket.\n *\n * @return {Boolean} whether this transport is available.\n * @api public\n */\n\nWS.prototype.check \x3d function(){\n  return !!WebSocket \x26\x26 !('__initialize' in WebSocket \x26\x26 this.name \x3d\x3d\x3d WS.prototype.name);\n};\n\n},{\"../transport\":14,\"component-inherit\":21,\"debug\":22,\"engine.io-parser\":25,\"parseqs\":33,\"ws\":35}],20:[function(_dereq_,module,exports){\n// browser shim for xmlhttprequest module\nvar hasCORS \x3d _dereq_('has-cors');\n\nmodule.exports \x3d function(opts) {\n  var xdomain \x3d opts.xdomain;\n\n  // scheme must be same when usign XDomainRequest\n  // http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx\n  var xscheme \x3d opts.xscheme;\n\n  // XDomainRequest has a flow of not sending cookie, therefore it should be disabled as a default.\n  // https://github.com/Automattic/engine.io-client/pull/217\n  var enablesXDR \x3d opts.enablesXDR;\n\n  // XMLHttpRequest can be disabled on IE\n  try {\n    if ('undefined' !\x3d typeof XMLHttpRequest \x26\x26 (!xdomain || hasCORS)) {\n      return new XMLHttpRequest();\n    }\n  } catch (e) { }\n\n  // Use XDomainRequest for IE8 if enablesXDR is true\n  // because loading bar keeps flashing when using jsonp-polling\n  // https://github.com/yujiosaka/socke.io-ie8-loading-example\n  try {\n    if ('undefined' !\x3d typeof XDomainRequest \x26\x26 !xscheme \x26\x26 enablesXDR) {\n      return new XDomainRequest();\n    }\n  } catch (e) { }\n\n  if (!xdomain) {\n    try {\n      return new ActiveXObject('Microsoft.XMLHTTP');\n    } catch(e) { }\n  }\n}\n\n},{\"has-cors\":38}],21:[function(_dereq_,module,exports){\n\nmodule.exports \x3d function(a, b){\n  var fn \x3d function(){};\n  fn.prototype \x3d b.prototype;\n  a.prototype \x3d new fn;\n  a.prototype.constructor \x3d a;\n};\n},{}],22:[function(_dereq_,module,exports){\n\n/**\n * This is the web browser implementation of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports \x3d module.exports \x3d _dereq_('./debug');\nexports.log \x3d log;\nexports.formatArgs \x3d formatArgs;\nexports.save \x3d save;\nexports.load \x3d load;\nexports.useColors \x3d useColors;\n\n/**\n * Colors.\n */\n\nexports.colors \x3d [\n  'lightseagreen',\n  'forestgreen',\n  'goldenrod',\n  'dodgerblue',\n  'darkorchid',\n  'crimson'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox \x3e\x3d v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\nfunction useColors() {\n  // is webkit? http://stackoverflow.com/a/16459606/376773\n  return ('WebkitAppearance' in document.documentElement.style) ||\n    // is firebug? http://stackoverflow.com/a/398120/376773\n    (window.console \x26\x26 (console.firebug || (console.exception \x26\x26 console.table))) ||\n    // is firefox \x3e\x3d v31?\n    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n    (navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) \x26\x26 parseInt(RegExp.$1, 10) \x3e\x3d 31);\n}\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nexports.formatters.j \x3d function(v) {\n  return JSON.stringify(v);\n};\n\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs() {\n  var args \x3d arguments;\n  var useColors \x3d this.useColors;\n\n  args[0] \x3d (useColors ? '%c' : '')\n    + this.namespace\n    + (useColors ? ' %c' : ' ')\n    + args[0]\n    + (useColors ? '%c ' : ' ')\n    + '+' + exports.humanize(this.diff);\n\n  if (!useColors) return args;\n\n  var c \x3d 'color: ' + this.color;\n  args \x3d [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));\n\n  // the final \"%c\" is somewhat tricky, because there could be other\n  // arguments passed either before or after the %c, so we need to\n  // figure out the correct index to insert the CSS into\n  var index \x3d 0;\n  var lastC \x3d 0;\n  args[0].replace(/%[a-z%]/g, function(match) {\n    if ('%%' \x3d\x3d\x3d match) return;\n    index++;\n    if ('%c' \x3d\x3d\x3d match) {\n      // we only are interested in the *last* %c\n      // (the user may have provided their own)\n      lastC \x3d index;\n    }\n  });\n\n  args.splice(lastC, 0, c);\n  return args;\n}\n\n/**\n * Invokes `console.log()` when available.\n * No-op when `console.log` is not a \"function\".\n *\n * @api public\n */\n\nfunction log() {\n  // This hackery is required for IE8,\n  // where the `console.log` function doesn't have 'apply'\n  return 'object' \x3d\x3d typeof console\n    \x26\x26 'function' \x3d\x3d typeof console.log\n    \x26\x26 Function.prototype.apply.call(console.log, console, arguments);\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\nfunction save(namespaces) {\n  try {\n    if (null \x3d\x3d namespaces) {\n      localStorage.removeItem('debug');\n    } else {\n      localStorage.debug \x3d namespaces;\n    }\n  } catch(e) {}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n  var r;\n  try {\n    r \x3d localStorage.debug;\n  } catch(e) {}\n  return r;\n}\n\n/**\n * Enable namespaces listed in `localStorage.debug` initially.\n */\n\nexports.enable(load());\n\n},{\"./debug\":23}],23:[function(_dereq_,module,exports){\n\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports \x3d module.exports \x3d debug;\nexports.coerce \x3d coerce;\nexports.disable \x3d disable;\nexports.enable \x3d enable;\nexports.enabled \x3d enabled;\nexports.humanize \x3d _dereq_('ms');\n\n/**\n * The currently active debug mode names, and names to skip.\n */\n\nexports.names \x3d [];\nexports.skips \x3d [];\n\n/**\n * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n *\n * Valid key names are a single, lowercased letter, i.e. \"n\".\n */\n\nexports.formatters \x3d {};\n\n/**\n * Previously assigned color.\n */\n\nvar prevColor \x3d 0;\n\n/**\n * Previous log timestamp.\n */\n\nvar prevTime;\n\n/**\n * Select a color.\n *\n * @return {Number}\n * @api private\n */\n\nfunction selectColor() {\n  return exports.colors[prevColor++ % exports.colors.length];\n}\n\n/**\n * Create a debugger with the given `namespace`.\n *\n * @param {String} namespace\n * @return {Function}\n * @api public\n */\n\nfunction debug(namespace) {\n\n  // define the `disabled` version\n  function disabled() {\n  }\n  disabled.enabled \x3d false;\n\n  // define the `enabled` version\n  function enabled() {\n\n    var self \x3d enabled;\n\n    // set `diff` timestamp\n    var curr \x3d +new Date();\n    var ms \x3d curr - (prevTime || curr);\n    self.diff \x3d ms;\n    self.prev \x3d prevTime;\n    self.curr \x3d curr;\n    prevTime \x3d curr;\n\n    // add the `color` if not set\n    if (null \x3d\x3d self.useColors) self.useColors \x3d exports.useColors();\n    if (null \x3d\x3d self.color \x26\x26 self.useColors) self.color \x3d selectColor();\n\n    var args \x3d Array.prototype.slice.call(arguments);\n\n    args[0] \x3d exports.coerce(args[0]);\n\n    if ('string' !\x3d\x3d typeof args[0]) {\n      // anything else let's inspect with %o\n      args \x3d ['%o'].concat(args);\n    }\n\n    // apply any `formatters` transformations\n    var index \x3d 0;\n    args[0] \x3d args[0].replace(/%([a-z%])/g, function(match, format) {\n      // if we encounter an escaped % then don't increase the array index\n      if (match \x3d\x3d\x3d '%%') return match;\n      index++;\n      var formatter \x3d exports.formatters[format];\n      if ('function' \x3d\x3d\x3d typeof formatter) {\n        var val \x3d args[index];\n        match \x3d formatter.call(self, val);\n\n        // now we need to remove `args[index]` since it's inlined in the `format`\n        args.splice(index, 1);\n        index--;\n      }\n      return match;\n    });\n\n    if ('function' \x3d\x3d\x3d typeof exports.formatArgs) {\n      args \x3d exports.formatArgs.apply(self, args);\n    }\n    var logFn \x3d enabled.log || exports.log || console.log.bind(console);\n    logFn.apply(self, args);\n  }\n  enabled.enabled \x3d true;\n\n  var fn \x3d exports.enabled(namespace) ? enabled : disabled;\n\n  fn.namespace \x3d namespace;\n\n  return fn;\n}\n\n/**\n * Enables a debug mode by namespaces. This can include modes\n * separated by a colon and wildcards.\n *\n * @param {String} namespaces\n * @api public\n */\n\nfunction enable(namespaces) {\n  exports.save(namespaces);\n\n  var split \x3d (namespaces || '').split(/[\\s,]+/);\n  var len \x3d split.length;\n\n  for (var i \x3d 0; i \x3c len; i++) {\n    if (!split[i]) continue; // ignore empty strings\n    namespaces \x3d split[i].replace(/\\*/g, '.*?');\n    if (namespaces[0] \x3d\x3d\x3d '-') {\n      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n    } else {\n      exports.names.push(new RegExp('^' + namespaces + '$'));\n    }\n  }\n}\n\n/**\n * Disable debug output.\n *\n * @api public\n */\n\nfunction disable() {\n  exports.enable('');\n}\n\n/**\n * Returns true if the given mode name is enabled, false otherwise.\n *\n * @param {String} name\n * @return {Boolean}\n * @api public\n */\n\nfunction enabled(name) {\n  var i, len;\n  for (i \x3d 0, len \x3d exports.skips.length; i \x3c len; i++) {\n    if (exports.skips[i].test(name)) {\n      return false;\n    }\n  }\n  for (i \x3d 0, len \x3d exports.names.length; i \x3c len; i++) {\n    if (exports.names[i].test(name)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Coerce `val`.\n *\n * @param {Mixed} val\n * @return {Mixed}\n * @api private\n */\n\nfunction coerce(val) {\n  if (val instanceof Error) return val.stack || val.message;\n  return val;\n}\n\n},{\"ms\":24}],24:[function(_dereq_,module,exports){\n/**\n * Helpers.\n */\n\nvar s \x3d 1000;\nvar m \x3d s * 60;\nvar h \x3d m * 60;\nvar d \x3d h * 24;\nvar y \x3d d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} options\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports \x3d function(val, options){\n  options \x3d options || {};\n  if ('string' \x3d\x3d typeof val) return parse(val);\n  return options['long'] ? longFormat(val) : shortFormat(val);\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  var match \x3d /^((?:\\d+)?\\.?\\d+) *(ms|seconds?|s|minutes?|m|hours?|h|days?|d|years?|y)?$/i.exec(str);\n  if (!match) return;\n  var n \x3d parseFloat(match[1]);\n  var type \x3d (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'y':\n      return n * y;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 's':\n      return n * s;\n    case 'ms':\n      return n;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction shortFormat(ms) {\n  if (ms \x3e\x3d d) return Math.round(ms / d) + 'd';\n  if (ms \x3e\x3d h) return Math.round(ms / h) + 'h';\n  if (ms \x3e\x3d m) return Math.round(ms / m) + 'm';\n  if (ms \x3e\x3d s) return Math.round(ms / s) + 's';\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction longFormat(ms) {\n  return plural(ms, d, 'day')\n    || plural(ms, h, 'hour')\n    || plural(ms, m, 'minute')\n    || plural(ms, s, 'second')\n    || ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, n, name) {\n  if (ms \x3c n) return;\n  if (ms \x3c n * 1.5) return Math.floor(ms / n) + ' ' + name;\n  return Math.ceil(ms / n) + ' ' + name + 's';\n}\n\n},{}],25:[function(_dereq_,module,exports){\n(function (global){\n/**\n * Module dependencies.\n */\n\nvar keys \x3d _dereq_('./keys');\nvar hasBinary \x3d _dereq_('has-binary');\nvar sliceBuffer \x3d _dereq_('arraybuffer.slice');\nvar base64encoder \x3d _dereq_('base64-arraybuffer');\nvar after \x3d _dereq_('after');\nvar utf8 \x3d _dereq_('utf8');\n\n/**\n * Check if we are running an android browser. That requires us to use\n * ArrayBuffer with polling transports...\n *\n * http://ghinda.net/jpeg-blob-ajax-android/\n */\n\nvar isAndroid \x3d navigator.userAgent.match(/Android/i);\n\n/**\n * Check if we are running in PhantomJS.\n * Uploading a Blob with PhantomJS does not work correctly, as reported here:\n * https://github.com/ariya/phantomjs/issues/11395\n * @type boolean\n */\nvar isPhantomJS \x3d /PhantomJS/i.test(navigator.userAgent);\n\n/**\n * When true, avoids using Blobs to encode payloads.\n * @type boolean\n */\nvar dontSendBlobs \x3d isAndroid || isPhantomJS;\n\n/**\n * Current protocol version.\n */\n\nexports.protocol \x3d 3;\n\n/**\n * Packet types.\n */\n\nvar packets \x3d exports.packets \x3d {\n    open:     0    // non-ws\n  , close:    1    // non-ws\n  , ping:     2\n  , pong:     3\n  , message:  4\n  , upgrade:  5\n  , noop:     6\n};\n\nvar packetslist \x3d keys(packets);\n\n/**\n * Premade error packet.\n */\n\nvar err \x3d { type: 'error', data: 'parser error' };\n\n/**\n * Create a blob api even for blob builder when vendor prefixes exist\n */\n\nvar Blob \x3d _dereq_('blob');\n\n/**\n * Encodes a packet.\n *\n *     \x3cpacket type id\x3e [ \x3cdata\x3e ]\n *\n * Example:\n *\n *     5hello world\n *     3\n *     4\n *\n * Binary is encoded in an identical principle\n *\n * @api private\n */\n\nexports.encodePacket \x3d function (packet, supportsBinary, utf8encode, callback) {\n  if ('function' \x3d\x3d typeof supportsBinary) {\n    callback \x3d supportsBinary;\n    supportsBinary \x3d false;\n  }\n\n  if ('function' \x3d\x3d typeof utf8encode) {\n    callback \x3d utf8encode;\n    utf8encode \x3d null;\n  }\n\n  var data \x3d (packet.data \x3d\x3d\x3d undefined)\n    ? undefined\n    : packet.data.buffer || packet.data;\n\n  if (global.ArrayBuffer \x26\x26 data instanceof ArrayBuffer) {\n    return encodeArrayBuffer(packet, supportsBinary, callback);\n  } else if (Blob \x26\x26 data instanceof global.Blob) {\n    return encodeBlob(packet, supportsBinary, callback);\n  }\n\n  // might be an object with { base64: true, data: dataAsBase64String }\n  if (data \x26\x26 data.base64) {\n    return encodeBase64Object(packet, callback);\n  }\n\n  // Sending data as a utf-8 string\n  var encoded \x3d packets[packet.type];\n\n  // data fragment is optional\n  if (undefined !\x3d\x3d packet.data) {\n    encoded +\x3d utf8encode ? utf8.encode(String(packet.data)) : String(packet.data);\n  }\n\n  return callback('' + encoded);\n\n};\n\nfunction encodeBase64Object(packet, callback) {\n  // packet data is an object { base64: true, data: dataAsBase64String }\n  var message \x3d 'b' + exports.packets[packet.type] + packet.data.data;\n  return callback(message);\n}\n\n/**\n * Encode packet helpers for binary types\n */\n\nfunction encodeArrayBuffer(packet, supportsBinary, callback) {\n  if (!supportsBinary) {\n    return exports.encodeBase64Packet(packet, callback);\n  }\n\n  var data \x3d packet.data;\n  var contentArray \x3d new Uint8Array(data);\n  var resultBuffer \x3d new Uint8Array(1 + data.byteLength);\n\n  resultBuffer[0] \x3d packets[packet.type];\n  for (var i \x3d 0; i \x3c contentArray.length; i++) {\n    resultBuffer[i+1] \x3d contentArray[i];\n  }\n\n  return callback(resultBuffer.buffer);\n}\n\nfunction encodeBlobAsArrayBuffer(packet, supportsBinary, callback) {\n  if (!supportsBinary) {\n    return exports.encodeBase64Packet(packet, callback);\n  }\n\n  var fr \x3d new FileReader();\n  fr.onload \x3d function() {\n    packet.data \x3d fr.result;\n    exports.encodePacket(packet, supportsBinary, true, callback);\n  };\n  return fr.readAsArrayBuffer(packet.data);\n}\n\nfunction encodeBlob(packet, supportsBinary, callback) {\n  if (!supportsBinary) {\n    return exports.encodeBase64Packet(packet, callback);\n  }\n\n  if (dontSendBlobs) {\n    return encodeBlobAsArrayBuffer(packet, supportsBinary, callback);\n  }\n\n  var length \x3d new Uint8Array(1);\n  length[0] \x3d packets[packet.type];\n  var blob \x3d new Blob([length.buffer, packet.data]);\n\n  return callback(blob);\n}\n\n/**\n * Encodes a packet with binary data in a base64 string\n *\n * @param {Object} packet, has `type` and `data`\n * @return {String} base64 encoded message\n */\n\nexports.encodeBase64Packet \x3d function(packet, callback) {\n  var message \x3d 'b' + exports.packets[packet.type];\n  if (Blob \x26\x26 packet.data instanceof Blob) {\n    var fr \x3d new FileReader();\n    fr.onload \x3d function() {\n      var b64 \x3d fr.result.split(',')[1];\n      callback(message + b64);\n    };\n    return fr.readAsDataURL(packet.data);\n  }\n\n  var b64data;\n  try {\n    b64data \x3d String.fromCharCode.apply(null, new Uint8Array(packet.data));\n  } catch (e) {\n    // iPhone Safari doesn't let you apply with typed arrays\n    var typed \x3d new Uint8Array(packet.data);\n    var basic \x3d new Array(typed.length);\n    for (var i \x3d 0; i \x3c typed.length; i++) {\n      basic[i] \x3d typed[i];\n    }\n    b64data \x3d String.fromCharCode.apply(null, basic);\n  }\n  message +\x3d global.btoa(b64data);\n  return callback(message);\n};\n\n/**\n * Decodes a packet. Changes format to Blob if requested.\n *\n * @return {Object} with `type` and `data` (if any)\n * @api private\n */\n\nexports.decodePacket \x3d function (data, binaryType, utf8decode) {\n  // String data\n  if (typeof data \x3d\x3d 'string' || data \x3d\x3d\x3d undefined) {\n    if (data.charAt(0) \x3d\x3d 'b') {\n      return exports.decodeBase64Packet(data.substr(1), binaryType);\n    }\n\n    if (utf8decode) {\n      try {\n        data \x3d utf8.decode(data);\n      } catch (e) {\n        return err;\n      }\n    }\n    var type \x3d data.charAt(0);\n\n    if (Number(type) !\x3d type || !packetslist[type]) {\n      return err;\n    }\n\n    if (data.length \x3e 1) {\n      return { type: packetslist[type], data: data.substring(1) };\n    } else {\n      return { type: packetslist[type] };\n    }\n  }\n\n  var asArray \x3d new Uint8Array(data);\n  var type \x3d asArray[0];\n  var rest \x3d sliceBuffer(data, 1);\n  if (Blob \x26\x26 binaryType \x3d\x3d\x3d 'blob') {\n    rest \x3d new Blob([rest]);\n  }\n  return { type: packetslist[type], data: rest };\n};\n\n/**\n * Decodes a packet encoded in a base64 string\n *\n * @param {String} base64 encoded message\n * @return {Object} with `type` and `data` (if any)\n */\n\nexports.decodeBase64Packet \x3d function(msg, binaryType) {\n  var type \x3d packetslist[msg.charAt(0)];\n  if (!global.ArrayBuffer) {\n    return { type: type, data: { base64: true, data: msg.substr(1) } };\n  }\n\n  var data \x3d base64encoder.decode(msg.substr(1));\n\n  if (binaryType \x3d\x3d\x3d 'blob' \x26\x26 Blob) {\n    data \x3d new Blob([data]);\n  }\n\n  return { type: type, data: data };\n};\n\n/**\n * Encodes multiple messages (payload).\n *\n *     \x3clength\x3e:data\n *\n * Example:\n *\n *     11:hello world2:hi\n *\n * If any contents are binary, they will be encoded as base64 strings. Base64\n * encoded strings are marked with a b before the length specifier\n *\n * @param {Array} packets\n * @api private\n */\n\nexports.encodePayload \x3d function (packets, supportsBinary, callback) {\n  if (typeof supportsBinary \x3d\x3d 'function') {\n    callback \x3d supportsBinary;\n    supportsBinary \x3d null;\n  }\n\n  var isBinary \x3d hasBinary(packets);\n\n  if (supportsBinary \x26\x26 isBinary) {\n    if (Blob \x26\x26 !dontSendBlobs) {\n      return exports.encodePayloadAsBlob(packets, callback);\n    }\n\n    return exports.encodePayloadAsArrayBuffer(packets, callback);\n  }\n\n  if (!packets.length) {\n    return callback('0:');\n  }\n\n  function setLengthHeader(message) {\n    return message.length + ':' + message;\n  }\n\n  function encodeOne(packet, doneCallback) {\n    exports.encodePacket(packet, !isBinary ? false : supportsBinary, true, function(message) {\n      doneCallback(null, setLengthHeader(message));\n    });\n  }\n\n  map(packets, encodeOne, function(err, results) {\n    return callback(results.join(''));\n  });\n};\n\n/**\n * Async array map using after\n */\n\nfunction map(ary, each, done) {\n  var result \x3d new Array(ary.length);\n  var next \x3d after(ary.length, done);\n\n  var eachWithIndex \x3d function(i, el, cb) {\n    each(el, function(error, msg) {\n      result[i] \x3d msg;\n      cb(error, result);\n    });\n  };\n\n  for (var i \x3d 0; i \x3c ary.length; i++) {\n    eachWithIndex(i, ary[i], next);\n  }\n}\n\n/*\n * Decodes data when a payload is maybe expected. Possible binary contents are\n * decoded from their base64 representation\n *\n * @param {String} data, callback method\n * @api public\n */\n\nexports.decodePayload \x3d function (data, binaryType, callback) {\n  if (typeof data !\x3d 'string') {\n    return exports.decodePayloadAsBinary(data, binaryType, callback);\n  }\n\n  if (typeof binaryType \x3d\x3d\x3d 'function') {\n    callback \x3d binaryType;\n    binaryType \x3d null;\n  }\n\n  var packet;\n  if (data \x3d\x3d '') {\n    // parser error - ignoring payload\n    return callback(err, 0, 1);\n  }\n\n  var length \x3d ''\n    , n, msg;\n\n  for (var i \x3d 0, l \x3d data.length; i \x3c l; i++) {\n    var chr \x3d data.charAt(i);\n\n    if (':' !\x3d chr) {\n      length +\x3d chr;\n    } else {\n      if ('' \x3d\x3d length || (length !\x3d (n \x3d Number(length)))) {\n        // parser error - ignoring payload\n        return callback(err, 0, 1);\n      }\n\n      msg \x3d data.substr(i + 1, n);\n\n      if (length !\x3d msg.length) {\n        // parser error - ignoring payload\n        return callback(err, 0, 1);\n      }\n\n      if (msg.length) {\n        packet \x3d exports.decodePacket(msg, binaryType, true);\n\n        if (err.type \x3d\x3d packet.type \x26\x26 err.data \x3d\x3d packet.data) {\n          // parser error in individual packet - ignoring payload\n          return callback(err, 0, 1);\n        }\n\n        var ret \x3d callback(packet, i + n, l);\n        if (false \x3d\x3d\x3d ret) return;\n      }\n\n      // advance cursor\n      i +\x3d n;\n      length \x3d '';\n    }\n  }\n\n  if (length !\x3d '') {\n    // parser error - ignoring payload\n    return callback(err, 0, 1);\n  }\n\n};\n\n/**\n * Encodes multiple messages (payload) as binary.\n *\n * \x3c1 \x3d binary, 0 \x3d string\x3e\x3cnumber from 0-9\x3e\x3cnumber from 0-9\x3e[...]\x3cnumber\n * 255\x3e\x3cdata\x3e\n *\n * Example:\n * 1 3 255 1 2 3, if the binary contents are interpreted as 8 bit integers\n *\n * @param {Array} packets\n * @return {ArrayBuffer} encoded payload\n * @api private\n */\n\nexports.encodePayloadAsArrayBuffer \x3d function(packets, callback) {\n  if (!packets.length) {\n    return callback(new ArrayBuffer(0));\n  }\n\n  function encodeOne(packet, doneCallback) {\n    exports.encodePacket(packet, true, true, function(data) {\n      return doneCallback(null, data);\n    });\n  }\n\n  map(packets, encodeOne, function(err, encodedPackets) {\n    var totalLength \x3d encodedPackets.reduce(function(acc, p) {\n      var len;\n      if (typeof p \x3d\x3d\x3d 'string'){\n        len \x3d p.length;\n      } else {\n        len \x3d p.byteLength;\n      }\n      return acc + len.toString().length + len + 2; // string/binary identifier + separator \x3d 2\n    }, 0);\n\n    var resultArray \x3d new Uint8Array(totalLength);\n\n    var bufferIndex \x3d 0;\n    encodedPackets.forEach(function(p) {\n      var isString \x3d typeof p \x3d\x3d\x3d 'string';\n      var ab \x3d p;\n      if (isString) {\n        var view \x3d new Uint8Array(p.length);\n        for (var i \x3d 0; i \x3c p.length; i++) {\n          view[i] \x3d p.charCodeAt(i);\n        }\n        ab \x3d view.buffer;\n      }\n\n      if (isString) { // not true binary\n        resultArray[bufferIndex++] \x3d 0;\n      } else { // true binary\n        resultArray[bufferIndex++] \x3d 1;\n      }\n\n      var lenStr \x3d ab.byteLength.toString();\n      for (var i \x3d 0; i \x3c lenStr.length; i++) {\n        resultArray[bufferIndex++] \x3d parseInt(lenStr[i]);\n      }\n      resultArray[bufferIndex++] \x3d 255;\n\n      var view \x3d new Uint8Array(ab);\n      for (var i \x3d 0; i \x3c view.length; i++) {\n        resultArray[bufferIndex++] \x3d view[i];\n      }\n    });\n\n    return callback(resultArray.buffer);\n  });\n};\n\n/**\n * Encode as Blob\n */\n\nexports.encodePayloadAsBlob \x3d function(packets, callback) {\n  function encodeOne(packet, doneCallback) {\n    exports.encodePacket(packet, true, true, function(encoded) {\n      var binaryIdentifier \x3d new Uint8Array(1);\n      binaryIdentifier[0] \x3d 1;\n      if (typeof encoded \x3d\x3d\x3d 'string') {\n        var view \x3d new Uint8Array(encoded.length);\n        for (var i \x3d 0; i \x3c encoded.length; i++) {\n          view[i] \x3d encoded.charCodeAt(i);\n        }\n        encoded \x3d view.buffer;\n        binaryIdentifier[0] \x3d 0;\n      }\n\n      var len \x3d (encoded instanceof ArrayBuffer)\n        ? encoded.byteLength\n        : encoded.size;\n\n      var lenStr \x3d len.toString();\n      var lengthAry \x3d new Uint8Array(lenStr.length + 1);\n      for (var i \x3d 0; i \x3c lenStr.length; i++) {\n        lengthAry[i] \x3d parseInt(lenStr[i]);\n      }\n      lengthAry[lenStr.length] \x3d 255;\n\n      if (Blob) {\n        var blob \x3d new Blob([binaryIdentifier.buffer, lengthAry.buffer, encoded]);\n        doneCallback(null, blob);\n      }\n    });\n  }\n\n  map(packets, encodeOne, function(err, results) {\n    return callback(new Blob(results));\n  });\n};\n\n/*\n * Decodes data when a payload is maybe expected. Strings are decoded by\n * interpreting each byte as a key code for entries marked to start with 0. See\n * description of encodePayloadAsBinary\n *\n * @param {ArrayBuffer} data, callback method\n * @api public\n */\n\nexports.decodePayloadAsBinary \x3d function (data, binaryType, callback) {\n  if (typeof binaryType \x3d\x3d\x3d 'function') {\n    callback \x3d binaryType;\n    binaryType \x3d null;\n  }\n\n  var bufferTail \x3d data;\n  var buffers \x3d [];\n\n  var numberTooLong \x3d false;\n  while (bufferTail.byteLength \x3e 0) {\n    var tailArray \x3d new Uint8Array(bufferTail);\n    var isString \x3d tailArray[0] \x3d\x3d\x3d 0;\n    var msgLength \x3d '';\n\n    for (var i \x3d 1; ; i++) {\n      if (tailArray[i] \x3d\x3d 255) break;\n\n      if (msgLength.length \x3e 310) {\n        numberTooLong \x3d true;\n        break;\n      }\n\n      msgLength +\x3d tailArray[i];\n    }\n\n    if(numberTooLong) return callback(err, 0, 1);\n\n    bufferTail \x3d sliceBuffer(bufferTail, 2 + msgLength.length);\n    msgLength \x3d parseInt(msgLength);\n\n    var msg \x3d sliceBuffer(bufferTail, 0, msgLength);\n    if (isString) {\n      try {\n        msg \x3d String.fromCharCode.apply(null, new Uint8Array(msg));\n      } catch (e) {\n        // iPhone Safari doesn't let you apply to typed arrays\n        var typed \x3d new Uint8Array(msg);\n        msg \x3d '';\n        for (var i \x3d 0; i \x3c typed.length; i++) {\n          msg +\x3d String.fromCharCode(typed[i]);\n        }\n      }\n    }\n\n    buffers.push(msg);\n    bufferTail \x3d sliceBuffer(bufferTail, msgLength);\n  }\n\n  var total \x3d buffers.length;\n  buffers.forEach(function(buffer, i) {\n    callback(exports.decodePacket(buffer, binaryType, true), i, total);\n  });\n};\n\n}).call(this,typeof self !\x3d\x3d \"undefined\" ? self : typeof window !\x3d\x3d \"undefined\" ? window : {})\n},{\"./keys\":26,\"after\":27,\"arraybuffer.slice\":28,\"base64-arraybuffer\":29,\"blob\":30,\"has-binary\":36,\"utf8\":31}],26:[function(_dereq_,module,exports){\n\n/**\n * Gets the keys for an object.\n *\n * @return {Array} keys\n * @api private\n */\n\nmodule.exports \x3d Object.keys || function keys (obj){\n  var arr \x3d [];\n  var has \x3d Object.prototype.hasOwnProperty;\n\n  for (var i in obj) {\n    if (has.call(obj, i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n},{}],27:[function(_dereq_,module,exports){\nmodule.exports \x3d after\n\nfunction after(count, callback, err_cb) {\n    var bail \x3d false\n    err_cb \x3d err_cb || noop\n    proxy.count \x3d count\n\n    return (count \x3d\x3d\x3d 0) ? callback() : proxy\n\n    function proxy(err, result) {\n        if (proxy.count \x3c\x3d 0) {\n            throw new Error('after called too many times')\n        }\n        --proxy.count\n\n        // after first error, rest are passed to err_cb\n        if (err) {\n            bail \x3d true\n            callback(err)\n            // future error callbacks will go to error handler\n            callback \x3d err_cb\n        } else if (proxy.count \x3d\x3d\x3d 0 \x26\x26 !bail) {\n            callback(null, result)\n        }\n    }\n}\n\nfunction noop() {}\n\n},{}],28:[function(_dereq_,module,exports){\n/**\n * An abstraction for slicing an arraybuffer even when\n * ArrayBuffer.prototype.slice is not supported\n *\n * @api public\n */\n\nmodule.exports \x3d function(arraybuffer, start, end) {\n  var bytes \x3d arraybuffer.byteLength;\n  start \x3d start || 0;\n  end \x3d end || bytes;\n\n  if (arraybuffer.slice) { return arraybuffer.slice(start, end); }\n\n  if (start \x3c 0) { start +\x3d bytes; }\n  if (end \x3c 0) { end +\x3d bytes; }\n  if (end \x3e bytes) { end \x3d bytes; }\n\n  if (start \x3e\x3d bytes || start \x3e\x3d end || bytes \x3d\x3d\x3d 0) {\n    return new ArrayBuffer(0);\n  }\n\n  var abv \x3d new Uint8Array(arraybuffer);\n  var result \x3d new Uint8Array(end - start);\n  for (var i \x3d start, ii \x3d 0; i \x3c end; i++, ii++) {\n    result[ii] \x3d abv[i];\n  }\n  return result.buffer;\n};\n\n},{}],29:[function(_dereq_,module,exports){\n/*\n * base64-arraybuffer\n * https://github.com/niklasvh/base64-arraybuffer\n *\n * Copyright (c) 2012 Niklas von Hertzen\n * Licensed under the MIT license.\n */\n(function(chars){\n  \"use strict\";\n\n  exports.encode \x3d function(arraybuffer) {\n    var bytes \x3d new Uint8Array(arraybuffer),\n    i, len \x3d bytes.length, base64 \x3d \"\";\n\n    for (i \x3d 0; i \x3c len; i+\x3d3) {\n      base64 +\x3d chars[bytes[i] \x3e\x3e 2];\n      base64 +\x3d chars[((bytes[i] \x26 3) \x3c\x3c 4) | (bytes[i + 1] \x3e\x3e 4)];\n      base64 +\x3d chars[((bytes[i + 1] \x26 15) \x3c\x3c 2) | (bytes[i + 2] \x3e\x3e 6)];\n      base64 +\x3d chars[bytes[i + 2] \x26 63];\n    }\n\n    if ((len % 3) \x3d\x3d\x3d 2) {\n      base64 \x3d base64.substring(0, base64.length - 1) + \"\x3d\";\n    } else if (len % 3 \x3d\x3d\x3d 1) {\n      base64 \x3d base64.substring(0, base64.length - 2) + \"\x3d\x3d\";\n    }\n\n    return base64;\n  };\n\n  exports.decode \x3d  function(base64) {\n    var bufferLength \x3d base64.length * 0.75,\n    len \x3d base64.length, i, p \x3d 0,\n    encoded1, encoded2, encoded3, encoded4;\n\n    if (base64[base64.length - 1] \x3d\x3d\x3d \"\x3d\") {\n      bufferLength--;\n      if (base64[base64.length - 2] \x3d\x3d\x3d \"\x3d\") {\n        bufferLength--;\n      }\n    }\n\n    var arraybuffer \x3d new ArrayBuffer(bufferLength),\n    bytes \x3d new Uint8Array(arraybuffer);\n\n    for (i \x3d 0; i \x3c len; i+\x3d4) {\n      encoded1 \x3d chars.indexOf(base64[i]);\n      encoded2 \x3d chars.indexOf(base64[i+1]);\n      encoded3 \x3d chars.indexOf(base64[i+2]);\n      encoded4 \x3d chars.indexOf(base64[i+3]);\n\n      bytes[p++] \x3d (encoded1 \x3c\x3c 2) | (encoded2 \x3e\x3e 4);\n      bytes[p++] \x3d ((encoded2 \x26 15) \x3c\x3c 4) | (encoded3 \x3e\x3e 2);\n      bytes[p++] \x3d ((encoded3 \x26 3) \x3c\x3c 6) | (encoded4 \x26 63);\n    }\n\n    return arraybuffer;\n  };\n})(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\");\n\n},{}],30:[function(_dereq_,module,exports){\n(function (global){\n/**\n * Create a blob builder even when vendor prefixes exist\n */\n\nvar BlobBuilder \x3d global.BlobBuilder\n  || global.WebKitBlobBuilder\n  || global.MSBlobBuilder\n  || global.MozBlobBuilder;\n\n/**\n * Check if Blob constructor is supported\n */\n\nvar blobSupported \x3d (function() {\n  try {\n    var a \x3d new Blob(['hi']);\n    return a.size \x3d\x3d\x3d 2;\n  } catch(e) {\n    return false;\n  }\n})();\n\n/**\n * Check if Blob constructor supports ArrayBufferViews\n * Fails in Safari 6, so we need to map to ArrayBuffers there.\n */\n\nvar blobSupportsArrayBufferView \x3d blobSupported \x26\x26 (function() {\n  try {\n    var b \x3d new Blob([new Uint8Array([1,2])]);\n    return b.size \x3d\x3d\x3d 2;\n  } catch(e) {\n    return false;\n  }\n})();\n\n/**\n * Check if BlobBuilder is supported\n */\n\nvar blobBuilderSupported \x3d BlobBuilder\n  \x26\x26 BlobBuilder.prototype.append\n  \x26\x26 BlobBuilder.prototype.getBlob;\n\n/**\n * Helper function that maps ArrayBufferViews to ArrayBuffers\n * Used by BlobBuilder constructor and old browsers that didn't\n * support it in the Blob constructor.\n */\n\nfunction mapArrayBufferViews(ary) {\n  for (var i \x3d 0; i \x3c ary.length; i++) {\n    var chunk \x3d ary[i];\n    if (chunk.buffer instanceof ArrayBuffer) {\n      var buf \x3d chunk.buffer;\n\n      // if this is a subarray, make a copy so we only\n      // include the subarray region from the underlying buffer\n      if (chunk.byteLength !\x3d\x3d buf.byteLength) {\n        var copy \x3d new Uint8Array(chunk.byteLength);\n        copy.set(new Uint8Array(buf, chunk.byteOffset, chunk.byteLength));\n        buf \x3d copy.buffer;\n      }\n\n      ary[i] \x3d buf;\n    }\n  }\n}\n\nfunction BlobBuilderConstructor(ary, options) {\n  options \x3d options || {};\n\n  var bb \x3d new BlobBuilder();\n  mapArrayBufferViews(ary);\n\n  for (var i \x3d 0; i \x3c ary.length; i++) {\n    bb.append(ary[i]);\n  }\n\n  return (options.type) ? bb.getBlob(options.type) : bb.getBlob();\n};\n\nfunction BlobConstructor(ary, options) {\n  mapArrayBufferViews(ary);\n  return new Blob(ary, options || {});\n};\n\nmodule.exports \x3d (function() {\n  if (blobSupported) {\n    return blobSupportsArrayBufferView ? global.Blob : BlobConstructor;\n  } else if (blobBuilderSupported) {\n    return BlobBuilderConstructor;\n  } else {\n    return undefined;\n  }\n})();\n\n}).call(this,typeof self !\x3d\x3d \"undefined\" ? self : typeof window !\x3d\x3d \"undefined\" ? window : {})\n},{}],31:[function(_dereq_,module,exports){\n(function (global){\n/*! https://mths.be/utf8js v2.0.0 by @mathias */\n;(function(root) {\n\n\t// Detect free variables `exports`\n\tvar freeExports \x3d typeof exports \x3d\x3d 'object' \x26\x26 exports;\n\n\t// Detect free variable `module`\n\tvar freeModule \x3d typeof module \x3d\x3d 'object' \x26\x26 module \x26\x26\n\t\tmodule.exports \x3d\x3d freeExports \x26\x26 module;\n\n\t// Detect free variable `global`, from Node.js or Browserified code,\n\t// and use it as `root`\n\tvar freeGlobal \x3d typeof global \x3d\x3d 'object' \x26\x26 global;\n\tif (freeGlobal.global \x3d\x3d\x3d freeGlobal || freeGlobal.window \x3d\x3d\x3d freeGlobal) {\n\t\troot \x3d freeGlobal;\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\tvar stringFromCharCode \x3d String.fromCharCode;\n\n\t// Taken from https://mths.be/punycode\n\tfunction ucs2decode(string) {\n\t\tvar output \x3d [];\n\t\tvar counter \x3d 0;\n\t\tvar length \x3d string.length;\n\t\tvar value;\n\t\tvar extra;\n\t\twhile (counter \x3c length) {\n\t\t\tvalue \x3d string.charCodeAt(counter++);\n\t\t\tif (value \x3e\x3d 0xD800 \x26\x26 value \x3c\x3d 0xDBFF \x26\x26 counter \x3c length) {\n\t\t\t\t// high surrogate, and there is a next character\n\t\t\t\textra \x3d string.charCodeAt(counter++);\n\t\t\t\tif ((extra \x26 0xFC00) \x3d\x3d 0xDC00) { // low surrogate\n\t\t\t\t\toutput.push(((value \x26 0x3FF) \x3c\x3c 10) + (extra \x26 0x3FF) + 0x10000);\n\t\t\t\t} else {\n\t\t\t\t\t// unmatched surrogate; only append this code unit, in case the next\n\t\t\t\t\t// code unit is the high surrogate of a surrogate pair\n\t\t\t\t\toutput.push(value);\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.push(value);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t// Taken from https://mths.be/punycode\n\tfunction ucs2encode(array) {\n\t\tvar length \x3d array.length;\n\t\tvar index \x3d -1;\n\t\tvar value;\n\t\tvar output \x3d '';\n\t\twhile (++index \x3c length) {\n\t\t\tvalue \x3d array[index];\n\t\t\tif (value \x3e 0xFFFF) {\n\t\t\t\tvalue -\x3d 0x10000;\n\t\t\t\toutput +\x3d stringFromCharCode(value \x3e\x3e\x3e 10 \x26 0x3FF | 0xD800);\n\t\t\t\tvalue \x3d 0xDC00 | value \x26 0x3FF;\n\t\t\t}\n\t\t\toutput +\x3d stringFromCharCode(value);\n\t\t}\n\t\treturn output;\n\t}\n\n\tfunction checkScalarValue(codePoint) {\n\t\tif (codePoint \x3e\x3d 0xD800 \x26\x26 codePoint \x3c\x3d 0xDFFF) {\n\t\t\tthrow Error(\n\t\t\t\t'Lone surrogate U+' + codePoint.toString(16).toUpperCase() +\n\t\t\t\t' is not a scalar value'\n\t\t\t);\n\t\t}\n\t}\n\t/*--------------------------------------------------------------------------*/\n\n\tfunction createByte(codePoint, shift) {\n\t\treturn stringFromCharCode(((codePoint \x3e\x3e shift) \x26 0x3F) | 0x80);\n\t}\n\n\tfunction encodeCodePoint(codePoint) {\n\t\tif ((codePoint \x26 0xFFFFFF80) \x3d\x3d 0) { // 1-byte sequence\n\t\t\treturn stringFromCharCode(codePoint);\n\t\t}\n\t\tvar symbol \x3d '';\n\t\tif ((codePoint \x26 0xFFFFF800) \x3d\x3d 0) { // 2-byte sequence\n\t\t\tsymbol \x3d stringFromCharCode(((codePoint \x3e\x3e 6) \x26 0x1F) | 0xC0);\n\t\t}\n\t\telse if ((codePoint \x26 0xFFFF0000) \x3d\x3d 0) { // 3-byte sequence\n\t\t\tcheckScalarValue(codePoint);\n\t\t\tsymbol \x3d stringFromCharCode(((codePoint \x3e\x3e 12) \x26 0x0F) | 0xE0);\n\t\t\tsymbol +\x3d createByte(codePoint, 6);\n\t\t}\n\t\telse if ((codePoint \x26 0xFFE00000) \x3d\x3d 0) { // 4-byte sequence\n\t\t\tsymbol \x3d stringFromCharCode(((codePoint \x3e\x3e 18) \x26 0x07) | 0xF0);\n\t\t\tsymbol +\x3d createByte(codePoint, 12);\n\t\t\tsymbol +\x3d createByte(codePoint, 6);\n\t\t}\n\t\tsymbol +\x3d stringFromCharCode((codePoint \x26 0x3F) | 0x80);\n\t\treturn symbol;\n\t}\n\n\tfunction utf8encode(string) {\n\t\tvar codePoints \x3d ucs2decode(string);\n\t\tvar length \x3d codePoints.length;\n\t\tvar index \x3d -1;\n\t\tvar codePoint;\n\t\tvar byteString \x3d '';\n\t\twhile (++index \x3c length) {\n\t\t\tcodePoint \x3d codePoints[index];\n\t\t\tbyteString +\x3d encodeCodePoint(codePoint);\n\t\t}\n\t\treturn byteString;\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\tfunction readContinuationByte() {\n\t\tif (byteIndex \x3e\x3d byteCount) {\n\t\t\tthrow Error('Invalid byte index');\n\t\t}\n\n\t\tvar continuationByte \x3d byteArray[byteIndex] \x26 0xFF;\n\t\tbyteIndex++;\n\n\t\tif ((continuationByte \x26 0xC0) \x3d\x3d 0x80) {\n\t\t\treturn continuationByte \x26 0x3F;\n\t\t}\n\n\t\t// If we end up here, it\u2019s not a continuation byte\n\t\tthrow Error('Invalid continuation byte');\n\t}\n\n\tfunction decodeSymbol() {\n\t\tvar byte1;\n\t\tvar byte2;\n\t\tvar byte3;\n\t\tvar byte4;\n\t\tvar codePoint;\n\n\t\tif (byteIndex \x3e byteCount) {\n\t\t\tthrow Error('Invalid byte index');\n\t\t}\n\n\t\tif (byteIndex \x3d\x3d byteCount) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Read first byte\n\t\tbyte1 \x3d byteArray[byteIndex] \x26 0xFF;\n\t\tbyteIndex++;\n\n\t\t// 1-byte sequence (no continuation bytes)\n\t\tif ((byte1 \x26 0x80) \x3d\x3d 0) {\n\t\t\treturn byte1;\n\t\t}\n\n\t\t// 2-byte sequence\n\t\tif ((byte1 \x26 0xE0) \x3d\x3d 0xC0) {\n\t\t\tvar byte2 \x3d readContinuationByte();\n\t\t\tcodePoint \x3d ((byte1 \x26 0x1F) \x3c\x3c 6) | byte2;\n\t\t\tif (codePoint \x3e\x3d 0x80) {\n\t\t\t\treturn codePoint;\n\t\t\t} else {\n\t\t\t\tthrow Error('Invalid continuation byte');\n\t\t\t}\n\t\t}\n\n\t\t// 3-byte sequence (may include unpaired surrogates)\n\t\tif ((byte1 \x26 0xF0) \x3d\x3d 0xE0) {\n\t\t\tbyte2 \x3d readContinuationByte();\n\t\t\tbyte3 \x3d readContinuationByte();\n\t\t\tcodePoint \x3d ((byte1 \x26 0x0F) \x3c\x3c 12) | (byte2 \x3c\x3c 6) | byte3;\n\t\t\tif (codePoint \x3e\x3d 0x0800) {\n\t\t\t\tcheckScalarValue(codePoint);\n\t\t\t\treturn codePoint;\n\t\t\t} else {\n\t\t\t\tthrow Error('Invalid continuation byte');\n\t\t\t}\n\t\t}\n\n\t\t// 4-byte sequence\n\t\tif ((byte1 \x26 0xF8) \x3d\x3d 0xF0) {\n\t\t\tbyte2 \x3d readContinuationByte();\n\t\t\tbyte3 \x3d readContinuationByte();\n\t\t\tbyte4 \x3d readContinuationByte();\n\t\t\tcodePoint \x3d ((byte1 \x26 0x0F) \x3c\x3c 0x12) | (byte2 \x3c\x3c 0x0C) |\n\t\t\t\t(byte3 \x3c\x3c 0x06) | byte4;\n\t\t\tif (codePoint \x3e\x3d 0x010000 \x26\x26 codePoint \x3c\x3d 0x10FFFF) {\n\t\t\t\treturn codePoint;\n\t\t\t}\n\t\t}\n\n\t\tthrow Error('Invalid UTF-8 detected');\n\t}\n\n\tvar byteArray;\n\tvar byteCount;\n\tvar byteIndex;\n\tfunction utf8decode(byteString) {\n\t\tbyteArray \x3d ucs2decode(byteString);\n\t\tbyteCount \x3d byteArray.length;\n\t\tbyteIndex \x3d 0;\n\t\tvar codePoints \x3d [];\n\t\tvar tmp;\n\t\twhile ((tmp \x3d decodeSymbol()) !\x3d\x3d false) {\n\t\t\tcodePoints.push(tmp);\n\t\t}\n\t\treturn ucs2encode(codePoints);\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\tvar utf8 \x3d {\n\t\t'version': '2.0.0',\n\t\t'encode': utf8encode,\n\t\t'decode': utf8decode\n\t};\n\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t// like the following:\n\tif (\n\t\ttypeof define \x3d\x3d 'function' \x26\x26\n\t\ttypeof define.amd \x3d\x3d 'object' \x26\x26\n\t\tdefine.amd\n\t) {\n\t\tdefine(function() {\n\t\t\treturn utf8;\n\t\t});\n\t}\telse if (freeExports \x26\x26 !freeExports.nodeType) {\n\t\tif (freeModule) { // in Node.js or RingoJS v0.8.0+\n\t\t\tfreeModule.exports \x3d utf8;\n\t\t} else { // in Narwhal or RingoJS v0.7.0-\n\t\t\tvar object \x3d {};\n\t\t\tvar hasOwnProperty \x3d object.hasOwnProperty;\n\t\t\tfor (var key in utf8) {\n\t\t\t\thasOwnProperty.call(utf8, key) \x26\x26 (freeExports[key] \x3d utf8[key]);\n\t\t\t}\n\t\t}\n\t} else { // in Rhino or a web browser\n\t\troot.utf8 \x3d utf8;\n\t}\n\n}(this));\n\n}).call(this,typeof self !\x3d\x3d \"undefined\" ? self : typeof window !\x3d\x3d \"undefined\" ? window : {})\n},{}],32:[function(_dereq_,module,exports){\n(function (global){\n/**\n * JSON parse.\n *\n * @see Based on jQuery#parseJSON (MIT) and JSON2\n * @api private\n */\n\nvar rvalidchars \x3d /^[\\],:{}\\s]*$/;\nvar rvalidescape \x3d /\\\\(?:[\"\\\\\\/bfnrt]|u[0-9a-fA-F]{4})/g;\nvar rvalidtokens \x3d /\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g;\nvar rvalidbraces \x3d /(?:^|:|,)(?:\\s*\\[)+/g;\nvar rtrimLeft \x3d /^\\s+/;\nvar rtrimRight \x3d /\\s+$/;\n\nmodule.exports \x3d function parsejson(data) {\n  if ('string' !\x3d typeof data || !data) {\n    return null;\n  }\n\n  data \x3d data.replace(rtrimLeft, '').replace(rtrimRight, '');\n\n  // Attempt to parse using the native JSON parser first\n  if (global.JSON \x26\x26 JSON.parse) {\n    return JSON.parse(data);\n  }\n\n  if (rvalidchars.test(data.replace(rvalidescape, '@')\n      .replace(rvalidtokens, ']')\n      .replace(rvalidbraces, ''))) {\n    return (new Function('return ' + data))();\n  }\n};\n}).call(this,typeof self !\x3d\x3d \"undefined\" ? self : typeof window !\x3d\x3d \"undefined\" ? window : {})\n},{}],33:[function(_dereq_,module,exports){\n/**\n * Compiles a querystring\n * Returns string representation of the object\n *\n * @param {Object}\n * @api private\n */\n\nexports.encode \x3d function (obj) {\n  var str \x3d '';\n\n  for (var i in obj) {\n    if (obj.hasOwnProperty(i)) {\n      if (str.length) str +\x3d '\x26';\n      str +\x3d encodeURIComponent(i) + '\x3d' + encodeURIComponent(obj[i]);\n    }\n  }\n\n  return str;\n};\n\n/**\n * Parses a simple querystring into an object\n *\n * @param {String} qs\n * @api private\n */\n\nexports.decode \x3d function(qs){\n  var qry \x3d {};\n  var pairs \x3d qs.split('\x26');\n  for (var i \x3d 0, l \x3d pairs.length; i \x3c l; i++) {\n    var pair \x3d pairs[i].split('\x3d');\n    qry[decodeURIComponent(pair[0])] \x3d decodeURIComponent(pair[1]);\n  }\n  return qry;\n};\n\n},{}],34:[function(_dereq_,module,exports){\n/**\n * Parses an URI\n *\n * @author Steven Levithan \x3cstevenlevithan.com\x3e (MIT license)\n * @api private\n */\n\nvar re \x3d /^(?:(?![^:@]+:[^:@\\/]*@)(http|https|ws|wss):\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/;\n\nvar parts \x3d [\n    'source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'\n];\n\nmodule.exports \x3d function parseuri(str) {\n    var src \x3d str,\n        b \x3d str.indexOf('['),\n        e \x3d str.indexOf(']');\n\n    if (b !\x3d -1 \x26\x26 e !\x3d -1) {\n        str \x3d str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);\n    }\n\n    var m \x3d re.exec(str || ''),\n        uri \x3d {},\n        i \x3d 14;\n\n    while (i--) {\n        uri[parts[i]] \x3d m[i] || '';\n    }\n\n    if (b !\x3d -1 \x26\x26 e !\x3d -1) {\n        uri.source \x3d src;\n        uri.host \x3d uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');\n        uri.authority \x3d uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');\n        uri.ipv6uri \x3d true;\n    }\n\n    return uri;\n};\n\n},{}],35:[function(_dereq_,module,exports){\n\n/**\n * Module dependencies.\n */\n\nvar global \x3d (function() { return this; })();\n\n/**\n * WebSocket constructor.\n */\n\nvar WebSocket \x3d global.WebSocket || global.MozWebSocket;\n\n/**\n * Module exports.\n */\n\nmodule.exports \x3d WebSocket ? ws : null;\n\n/**\n * WebSocket constructor.\n *\n * The third `opts` options object gets ignored in web browsers, since it's\n * non-standard, and throws a TypeError if passed to the constructor.\n * See: https://github.com/einaros/ws/issues/227\n *\n * @param {String} uri\n * @param {Array} protocols (optional)\n * @param {Object) opts (optional)\n * @api public\n */\n\nfunction ws(uri, protocols, opts) {\n  var instance;\n  if (protocols) {\n    instance \x3d new WebSocket(uri, protocols);\n  } else {\n    instance \x3d new WebSocket(uri);\n  }\n  return instance;\n}\n\nif (WebSocket) ws.prototype \x3d WebSocket.prototype;\n\n},{}],36:[function(_dereq_,module,exports){\n(function (global){\n\n/*\n * Module requirements.\n */\n\nvar isArray \x3d _dereq_('isarray');\n\n/**\n * Module exports.\n */\n\nmodule.exports \x3d hasBinary;\n\n/**\n * Checks for binary data.\n *\n * Right now only Buffer and ArrayBuffer are supported..\n *\n * @param {Object} anything\n * @api public\n */\n\nfunction hasBinary(data) {\n\n  function _hasBinary(obj) {\n    if (!obj) return false;\n\n    if ( (global.Buffer \x26\x26 global.Buffer.isBuffer(obj)) ||\n         (global.ArrayBuffer \x26\x26 obj instanceof ArrayBuffer) ||\n         (global.Blob \x26\x26 obj instanceof Blob) ||\n         (global.File \x26\x26 obj instanceof File)\n        ) {\n      return true;\n    }\n\n    if (isArray(obj)) {\n      for (var i \x3d 0; i \x3c obj.length; i++) {\n          if (_hasBinary(obj[i])) {\n              return true;\n          }\n      }\n    } else if (obj \x26\x26 'object' \x3d\x3d typeof obj) {\n      if (obj.toJSON) {\n        obj \x3d obj.toJSON();\n      }\n\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key) \x26\x26 _hasBinary(obj[key])) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  return _hasBinary(data);\n}\n\n}).call(this,typeof self !\x3d\x3d \"undefined\" ? self : typeof window !\x3d\x3d \"undefined\" ? window : {})\n},{\"isarray\":37}],37:[function(_dereq_,module,exports){\nmodule.exports \x3d Array.isArray || function (arr) {\n  return Object.prototype.toString.call(arr) \x3d\x3d '[object Array]';\n};\n\n},{}],38:[function(_dereq_,module,exports){\n\n/**\n * Module dependencies.\n */\n\nvar global \x3d _dereq_('global');\n\n/**\n * Module exports.\n *\n * Logic borrowed from Modernizr:\n *\n *   - https://github.com/Modernizr/Modernizr/blob/master/feature-detects/cors.js\n */\n\ntry {\n  module.exports \x3d 'XMLHttpRequest' in global \x26\x26\n    'withCredentials' in new global.XMLHttpRequest();\n} catch (err) {\n  // if XMLHttp support is disabled in IE then it will throw\n  // when trying to create\n  module.exports \x3d false;\n}\n\n},{\"global\":39}],39:[function(_dereq_,module,exports){\n\n/**\n * Returns `this`. Execute this without a \"context\" (i.e. without it being\n * attached to an object of the left-hand side), and `this` points to the\n * \"global\" scope of the current JS execution.\n */\n\nmodule.exports \x3d (function () { return this; })();\n\n},{}],40:[function(_dereq_,module,exports){\n\nvar indexOf \x3d [].indexOf;\n\nmodule.exports \x3d function(arr, obj){\n  if (indexOf) return arr.indexOf(obj);\n  for (var i \x3d 0; i \x3c arr.length; ++i) {\n    if (arr[i] \x3d\x3d\x3d obj) return i;\n  }\n  return -1;\n};\n},{}],41:[function(_dereq_,module,exports){\n\n/**\n * HOP ref.\n */\n\nvar has \x3d Object.prototype.hasOwnProperty;\n\n/**\n * Return own keys in `obj`.\n *\n * @param {Object} obj\n * @return {Array}\n * @api public\n */\n\nexports.keys \x3d Object.keys || function(obj){\n  var keys \x3d [];\n  for (var key in obj) {\n    if (has.call(obj, key)) {\n      keys.push(key);\n    }\n  }\n  return keys;\n};\n\n/**\n * Return own values in `obj`.\n *\n * @param {Object} obj\n * @return {Array}\n * @api public\n */\n\nexports.values \x3d function(obj){\n  var vals \x3d [];\n  for (var key in obj) {\n    if (has.call(obj, key)) {\n      vals.push(obj[key]);\n    }\n  }\n  return vals;\n};\n\n/**\n * Merge `b` into `a`.\n *\n * @param {Object} a\n * @param {Object} b\n * @return {Object} a\n * @api public\n */\n\nexports.merge \x3d function(a, b){\n  for (var key in b) {\n    if (has.call(b, key)) {\n      a[key] \x3d b[key];\n    }\n  }\n  return a;\n};\n\n/**\n * Return length of `obj`.\n *\n * @param {Object} obj\n * @return {Number}\n * @api public\n */\n\nexports.length \x3d function(obj){\n  return exports.keys(obj).length;\n};\n\n/**\n * Check if `obj` is empty.\n *\n * @param {Object} obj\n * @return {Boolean}\n * @api public\n */\n\nexports.isEmpty \x3d function(obj){\n  return 0 \x3d\x3d exports.length(obj);\n};\n},{}],42:[function(_dereq_,module,exports){\n/**\n * Parses an URI\n *\n * @author Steven Levithan \x3cstevenlevithan.com\x3e (MIT license)\n * @api private\n */\n\nvar re \x3d /^(?:(?![^:@]+:[^:@\\/]*@)(http|https|ws|wss):\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/;\n\nvar parts \x3d [\n    'source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host'\n  , 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'\n];\n\nmodule.exports \x3d function parseuri(str) {\n  var m \x3d re.exec(str || '')\n    , uri \x3d {}\n    , i \x3d 14;\n\n  while (i--) {\n    uri[parts[i]] \x3d m[i] || '';\n  }\n\n  return uri;\n};\n\n},{}],43:[function(_dereq_,module,exports){\n(function (global){\n/*global Blob,File*/\n\n/**\n * Module requirements\n */\n\nvar isArray \x3d _dereq_('isarray');\nvar isBuf \x3d _dereq_('./is-buffer');\n\n/**\n * Replaces every Buffer | ArrayBuffer in packet with a numbered placeholder.\n * Anything with blobs or files should be fed through removeBlobs before coming\n * here.\n *\n * @param {Object} packet - socket.io event packet\n * @return {Object} with deconstructed packet and list of buffers\n * @api public\n */\n\nexports.deconstructPacket \x3d function(packet){\n  var buffers \x3d [];\n  var packetData \x3d packet.data;\n\n  function _deconstructPacket(data) {\n    if (!data) return data;\n\n    if (isBuf(data)) {\n      var placeholder \x3d { _placeholder: true, num: buffers.length };\n      buffers.push(data);\n      return placeholder;\n    } else if (isArray(data)) {\n      var newData \x3d new Array(data.length);\n      for (var i \x3d 0; i \x3c data.length; i++) {\n        newData[i] \x3d _deconstructPacket(data[i]);\n      }\n      return newData;\n    } else if ('object' \x3d\x3d typeof data \x26\x26 !(data instanceof Date)) {\n      var newData \x3d {};\n      for (var key in data) {\n        newData[key] \x3d _deconstructPacket(data[key]);\n      }\n      return newData;\n    }\n    return data;\n  }\n\n  var pack \x3d packet;\n  pack.data \x3d _deconstructPacket(packetData);\n  pack.attachments \x3d buffers.length; // number of binary 'attachments'\n  return {packet: pack, buffers: buffers};\n};\n\n/**\n * Reconstructs a binary packet from its placeholder packet and buffers\n *\n * @param {Object} packet - event packet with placeholders\n * @param {Array} buffers - binary buffers to put in placeholder positions\n * @return {Object} reconstructed packet\n * @api public\n */\n\nexports.reconstructPacket \x3d function(packet, buffers) {\n  var curPlaceHolder \x3d 0;\n\n  function _reconstructPacket(data) {\n    if (data \x26\x26 data._placeholder) {\n      var buf \x3d buffers[data.num]; // appropriate buffer (should be natural order anyway)\n      return buf;\n    } else if (isArray(data)) {\n      for (var i \x3d 0; i \x3c data.length; i++) {\n        data[i] \x3d _reconstructPacket(data[i]);\n      }\n      return data;\n    } else if (data \x26\x26 'object' \x3d\x3d typeof data) {\n      for (var key in data) {\n        data[key] \x3d _reconstructPacket(data[key]);\n      }\n      return data;\n    }\n    return data;\n  }\n\n  packet.data \x3d _reconstructPacket(packet.data);\n  packet.attachments \x3d undefined; // no longer useful\n  return packet;\n};\n\n/**\n * Asynchronously removes Blobs or Files from data via\n * FileReader's readAsArrayBuffer method. Used before encoding\n * data as msgpack. Calls callback with the blobless data.\n *\n * @param {Object} data\n * @param {Function} callback\n * @api private\n */\n\nexports.removeBlobs \x3d function(data, callback) {\n  function _removeBlobs(obj, curKey, containingObject) {\n    if (!obj) return obj;\n\n    // convert any blob\n    if ((global.Blob \x26\x26 obj instanceof Blob) ||\n        (global.File \x26\x26 obj instanceof File)) {\n      pendingBlobs++;\n\n      // async filereader\n      var fileReader \x3d new FileReader();\n      fileReader.onload \x3d function() { // this.result \x3d\x3d arraybuffer\n        if (containingObject) {\n          containingObject[curKey] \x3d this.result;\n        }\n        else {\n          bloblessData \x3d this.result;\n        }\n\n        // if nothing pending its callback time\n        if(! --pendingBlobs) {\n          callback(bloblessData);\n        }\n      };\n\n      fileReader.readAsArrayBuffer(obj); // blob -\x3e arraybuffer\n    } else if (isArray(obj)) { // handle array\n      for (var i \x3d 0; i \x3c obj.length; i++) {\n        _removeBlobs(obj[i], i, obj);\n      }\n    } else if (obj \x26\x26 'object' \x3d\x3d typeof obj \x26\x26 !isBuf(obj)) { // and object\n      for (var key in obj) {\n        _removeBlobs(obj[key], key, obj);\n      }\n    }\n  }\n\n  var pendingBlobs \x3d 0;\n  var bloblessData \x3d data;\n  _removeBlobs(bloblessData);\n  if (!pendingBlobs) {\n    callback(bloblessData);\n  }\n};\n\n}).call(this,typeof self !\x3d\x3d \"undefined\" ? self : typeof window !\x3d\x3d \"undefined\" ? window : {})\n},{\"./is-buffer\":45,\"isarray\":46}],44:[function(_dereq_,module,exports){\n\n/**\n * Module dependencies.\n */\n\nvar debug \x3d _dereq_('debug')('socket.io-parser');\nvar json \x3d _dereq_('json3');\nvar isArray \x3d _dereq_('isarray');\nvar Emitter \x3d _dereq_('component-emitter');\nvar binary \x3d _dereq_('./binary');\nvar isBuf \x3d _dereq_('./is-buffer');\n\n/**\n * Protocol version.\n *\n * @api public\n */\n\nexports.protocol \x3d 4;\n\n/**\n * Packet types.\n *\n * @api public\n */\n\nexports.types \x3d [\n  'CONNECT',\n  'DISCONNECT',\n  'EVENT',\n  'BINARY_EVENT',\n  'ACK',\n  'BINARY_ACK',\n  'ERROR'\n];\n\n/**\n * Packet type `connect`.\n *\n * @api public\n */\n\nexports.CONNECT \x3d 0;\n\n/**\n * Packet type `disconnect`.\n *\n * @api public\n */\n\nexports.DISCONNECT \x3d 1;\n\n/**\n * Packet type `event`.\n *\n * @api public\n */\n\nexports.EVENT \x3d 2;\n\n/**\n * Packet type `ack`.\n *\n * @api public\n */\n\nexports.ACK \x3d 3;\n\n/**\n * Packet type `error`.\n *\n * @api public\n */\n\nexports.ERROR \x3d 4;\n\n/**\n * Packet type 'binary event'\n *\n * @api public\n */\n\nexports.BINARY_EVENT \x3d 5;\n\n/**\n * Packet type `binary ack`. For acks with binary arguments.\n *\n * @api public\n */\n\nexports.BINARY_ACK \x3d 6;\n\n/**\n * Encoder constructor.\n *\n * @api public\n */\n\nexports.Encoder \x3d Encoder;\n\n/**\n * Decoder constructor.\n *\n * @api public\n */\n\nexports.Decoder \x3d Decoder;\n\n/**\n * A socket.io Encoder instance\n *\n * @api public\n */\n\nfunction Encoder() {}\n\n/**\n * Encode a packet as a single string if non-binary, or as a\n * buffer sequence, depending on packet type.\n *\n * @param {Object} obj - packet object\n * @param {Function} callback - function to handle encodings (likely engine.write)\n * @return Calls callback with Array of encodings\n * @api public\n */\n\nEncoder.prototype.encode \x3d function(obj, callback){\n  debug('encoding packet %j', obj);\n\n  if (exports.BINARY_EVENT \x3d\x3d obj.type || exports.BINARY_ACK \x3d\x3d obj.type) {\n    encodeAsBinary(obj, callback);\n  }\n  else {\n    var encoding \x3d encodeAsString(obj);\n    callback([encoding]);\n  }\n};\n\n/**\n * Encode packet as string.\n *\n * @param {Object} packet\n * @return {String} encoded\n * @api private\n */\n\nfunction encodeAsString(obj) {\n  var str \x3d '';\n  var nsp \x3d false;\n\n  // first is type\n  str +\x3d obj.type;\n\n  // attachments if we have them\n  if (exports.BINARY_EVENT \x3d\x3d obj.type || exports.BINARY_ACK \x3d\x3d obj.type) {\n    str +\x3d obj.attachments;\n    str +\x3d '-';\n  }\n\n  // if we have a namespace other than `/`\n  // we append it followed by a comma `,`\n  if (obj.nsp \x26\x26 '/' !\x3d obj.nsp) {\n    nsp \x3d true;\n    str +\x3d obj.nsp;\n  }\n\n  // immediately followed by the id\n  if (null !\x3d obj.id) {\n    if (nsp) {\n      str +\x3d ',';\n      nsp \x3d false;\n    }\n    str +\x3d obj.id;\n  }\n\n  // json data\n  if (null !\x3d obj.data) {\n    if (nsp) str +\x3d ',';\n    str +\x3d json.stringify(obj.data);\n  }\n\n  debug('encoded %j as %s', obj, str);\n  return str;\n}\n\n/**\n * Encode packet as 'buffer sequence' by removing blobs, and\n * deconstructing packet into object with placeholders and\n * a list of buffers.\n *\n * @param {Object} packet\n * @return {Buffer} encoded\n * @api private\n */\n\nfunction encodeAsBinary(obj, callback) {\n\n  function writeEncoding(bloblessData) {\n    var deconstruction \x3d binary.deconstructPacket(bloblessData);\n    var pack \x3d encodeAsString(deconstruction.packet);\n    var buffers \x3d deconstruction.buffers;\n\n    buffers.unshift(pack); // add packet info to beginning of data list\n    callback(buffers); // write all the buffers\n  }\n\n  binary.removeBlobs(obj, writeEncoding);\n}\n\n/**\n * A socket.io Decoder instance\n *\n * @return {Object} decoder\n * @api public\n */\n\nfunction Decoder() {\n  this.reconstructor \x3d null;\n}\n\n/**\n * Mix in `Emitter` with Decoder.\n */\n\nEmitter(Decoder.prototype);\n\n/**\n * Decodes an ecoded packet string into packet JSON.\n *\n * @param {String} obj - encoded packet\n * @return {Object} packet\n * @api public\n */\n\nDecoder.prototype.add \x3d function(obj) {\n  var packet;\n  if ('string' \x3d\x3d typeof obj) {\n    packet \x3d decodeString(obj);\n    if (exports.BINARY_EVENT \x3d\x3d packet.type || exports.BINARY_ACK \x3d\x3d packet.type) { // binary packet's json\n      this.reconstructor \x3d new BinaryReconstructor(packet);\n\n      // no attachments, labeled binary but no binary data to follow\n      if (this.reconstructor.reconPack.attachments \x3d\x3d\x3d 0) {\n        this.emit('decoded', packet);\n      }\n    } else { // non-binary full packet\n      this.emit('decoded', packet);\n    }\n  }\n  else if (isBuf(obj) || obj.base64) { // raw binary data\n    if (!this.reconstructor) {\n      throw new Error('got binary data when not reconstructing a packet');\n    } else {\n      packet \x3d this.reconstructor.takeBinaryData(obj);\n      if (packet) { // received final buffer\n        this.reconstructor \x3d null;\n        this.emit('decoded', packet);\n      }\n    }\n  }\n  else {\n    throw new Error('Unknown type: ' + obj);\n  }\n};\n\n/**\n * Decode a packet String (JSON data)\n *\n * @param {String} str\n * @return {Object} packet\n * @api private\n */\n\nfunction decodeString(str) {\n  var p \x3d {};\n  var i \x3d 0;\n\n  // look up type\n  p.type \x3d Number(str.charAt(0));\n  if (null \x3d\x3d exports.types[p.type]) return error();\n\n  // look up attachments if type binary\n  if (exports.BINARY_EVENT \x3d\x3d p.type || exports.BINARY_ACK \x3d\x3d p.type) {\n    var buf \x3d '';\n    while (str.charAt(++i) !\x3d '-') {\n      buf +\x3d str.charAt(i);\n      if (i \x3d\x3d str.length) break;\n    }\n    if (buf !\x3d Number(buf) || str.charAt(i) !\x3d '-') {\n      throw new Error('Illegal attachments');\n    }\n    p.attachments \x3d Number(buf);\n  }\n\n  // look up namespace (if any)\n  if ('/' \x3d\x3d str.charAt(i + 1)) {\n    p.nsp \x3d '';\n    while (++i) {\n      var c \x3d str.charAt(i);\n      if (',' \x3d\x3d c) break;\n      p.nsp +\x3d c;\n      if (i \x3d\x3d str.length) break;\n    }\n  } else {\n    p.nsp \x3d '/';\n  }\n\n  // look up id\n  var next \x3d str.charAt(i + 1);\n  if ('' !\x3d\x3d next \x26\x26 Number(next) \x3d\x3d next) {\n    p.id \x3d '';\n    while (++i) {\n      var c \x3d str.charAt(i);\n      if (null \x3d\x3d c || Number(c) !\x3d c) {\n        --i;\n        break;\n      }\n      p.id +\x3d str.charAt(i);\n      if (i \x3d\x3d str.length) break;\n    }\n    p.id \x3d Number(p.id);\n  }\n\n  // look up json data\n  if (str.charAt(++i)) {\n    try {\n      p.data \x3d json.parse(str.substr(i));\n    } catch(e){\n      return error();\n    }\n  }\n\n  debug('decoded %s as %j', str, p);\n  return p;\n}\n\n/**\n * Deallocates a parser's resources\n *\n * @api public\n */\n\nDecoder.prototype.destroy \x3d function() {\n  if (this.reconstructor) {\n    this.reconstructor.finishedReconstruction();\n  }\n};\n\n/**\n * A manager of a binary event's 'buffer sequence'. Should\n * be constructed whenever a packet of type BINARY_EVENT is\n * decoded.\n *\n * @param {Object} packet\n * @return {BinaryReconstructor} initialized reconstructor\n * @api private\n */\n\nfunction BinaryReconstructor(packet) {\n  this.reconPack \x3d packet;\n  this.buffers \x3d [];\n}\n\n/**\n * Method to be called when binary data received from connection\n * after a BINARY_EVENT packet.\n *\n * @param {Buffer | ArrayBuffer} binData - the raw binary data received\n * @return {null | Object} returns null if more binary data is expected or\n *   a reconstructed packet object if all buffers have been received.\n * @api private\n */\n\nBinaryReconstructor.prototype.takeBinaryData \x3d function(binData) {\n  this.buffers.push(binData);\n  if (this.buffers.length \x3d\x3d this.reconPack.attachments) { // done with buffer list\n    var packet \x3d binary.reconstructPacket(this.reconPack, this.buffers);\n    this.finishedReconstruction();\n    return packet;\n  }\n  return null;\n};\n\n/**\n * Cleans up binary packet reconstruction variables.\n *\n * @api private\n */\n\nBinaryReconstructor.prototype.finishedReconstruction \x3d function() {\n  this.reconPack \x3d null;\n  this.buffers \x3d [];\n};\n\nfunction error(data){\n  return {\n    type: exports.ERROR,\n    data: 'parser error'\n  };\n}\n\n},{\"./binary\":43,\"./is-buffer\":45,\"component-emitter\":9,\"debug\":10,\"isarray\":46,\"json3\":47}],45:[function(_dereq_,module,exports){\n(function (global){\n\nmodule.exports \x3d isBuf;\n\n/**\n * Returns true if obj is a buffer or an arraybuffer.\n *\n * @api private\n */\n\nfunction isBuf(obj) {\n  return (global.Buffer \x26\x26 global.Buffer.isBuffer(obj)) ||\n         (global.ArrayBuffer \x26\x26 obj instanceof ArrayBuffer);\n}\n\n}).call(this,typeof self !\x3d\x3d \"undefined\" ? self : typeof window !\x3d\x3d \"undefined\" ? window : {})\n},{}],46:[function(_dereq_,module,exports){\nmodule.exports\x3d_dereq_(37)\n},{}],47:[function(_dereq_,module,exports){\n/*! JSON v3.2.6 | http://bestiejs.github.io/json3 | Copyright 2012-2013, Kit Cambridge | http://kit.mit-license.org */\n;(function (window) {\n  // Convenience aliases.\n  var getClass \x3d {}.toString, isProperty, forEach, undef;\n\n  // Detect the `define` function exposed by asynchronous module loaders. The\n  // strict `define` check is necessary for compatibility with `r.js`.\n  var isLoader \x3d typeof define \x3d\x3d\x3d \"function\" \x26\x26 define.amd;\n\n  // Detect native implementations.\n  var nativeJSON \x3d typeof JSON \x3d\x3d \"object\" \x26\x26 JSON;\n\n  // Set up the JSON 3 namespace, preferring the CommonJS `exports` object if\n  // available.\n  var JSON3 \x3d typeof exports \x3d\x3d \"object\" \x26\x26 exports \x26\x26 !exports.nodeType \x26\x26 exports;\n\n  if (JSON3 \x26\x26 nativeJSON) {\n    // Explicitly delegate to the native `stringify` and `parse`\n    // implementations in CommonJS environments.\n    JSON3.stringify \x3d nativeJSON.stringify;\n    JSON3.parse \x3d nativeJSON.parse;\n  } else {\n    // Export for web browsers, JavaScript engines, and asynchronous module\n    // loaders, using the global `JSON` object if available.\n    JSON3 \x3d window.JSON \x3d nativeJSON || {};\n  }\n\n  // Test the `Date#getUTC*` methods. Based on work by @Yaffle.\n  var isExtended \x3d new Date(-3509827334573292);\n  try {\n    // The `getUTCFullYear`, `Month`, and `Date` methods return nonsensical\n    // results for certain dates in Opera \x3e\x3d 10.53.\n    isExtended \x3d isExtended.getUTCFullYear() \x3d\x3d -109252 \x26\x26 isExtended.getUTCMonth() \x3d\x3d\x3d 0 \x26\x26 isExtended.getUTCDate() \x3d\x3d\x3d 1 \x26\x26\n      // Safari \x3c 2.0.2 stores the internal millisecond time value correctly,\n      // but clips the values returned by the date methods to the range of\n      // signed 32-bit integers ([-2 ** 31, 2 ** 31 - 1]).\n      isExtended.getUTCHours() \x3d\x3d 10 \x26\x26 isExtended.getUTCMinutes() \x3d\x3d 37 \x26\x26 isExtended.getUTCSeconds() \x3d\x3d 6 \x26\x26 isExtended.getUTCMilliseconds() \x3d\x3d 708;\n  } catch (exception) {}\n\n  // Internal: Determines whether the native `JSON.stringify` and `parse`\n  // implementations are spec-compliant. Based on work by Ken Snyder.\n  function has(name) {\n    if (has[name] !\x3d\x3d undef) {\n      // Return cached feature test result.\n      return has[name];\n    }\n\n    var isSupported;\n    if (name \x3d\x3d \"bug-string-char-index\") {\n      // IE \x3c\x3d 7 doesn't support accessing string characters using square\n      // bracket notation. IE 8 only supports this for primitives.\n      isSupported \x3d \"a\"[0] !\x3d \"a\";\n    } else if (name \x3d\x3d \"json\") {\n      // Indicates whether both `JSON.stringify` and `JSON.parse` are\n      // supported.\n      isSupported \x3d has(\"json-stringify\") \x26\x26 has(\"json-parse\");\n    } else {\n      var value, serialized \x3d '{\"a\":[1,true,false,null,\"\\\\u0000\\\\b\\\\n\\\\f\\\\r\\\\t\"]}';\n      // Test `JSON.stringify`.\n      if (name \x3d\x3d \"json-stringify\") {\n        var stringify \x3d JSON3.stringify, stringifySupported \x3d typeof stringify \x3d\x3d \"function\" \x26\x26 isExtended;\n        if (stringifySupported) {\n          // A test function object with a custom `toJSON` method.\n          (value \x3d function () {\n            return 1;\n          }).toJSON \x3d value;\n          try {\n            stringifySupported \x3d\n              // Firefox 3.1b1 and b2 serialize string, number, and boolean\n              // primitives as object literals.\n              stringify(0) \x3d\x3d\x3d \"0\" \x26\x26\n              // FF 3.1b1, b2, and JSON 2 serialize wrapped primitives as object\n              // literals.\n              stringify(new Number()) \x3d\x3d\x3d \"0\" \x26\x26\n              stringify(new String()) \x3d\x3d '\"\"' \x26\x26\n              // FF 3.1b1, 2 throw an error if the value is `null`, `undefined`, or\n              // does not define a canonical JSON representation (this applies to\n              // objects with `toJSON` properties as well, *unless* they are nested\n              // within an object or array).\n              stringify(getClass) \x3d\x3d\x3d undef \x26\x26\n              // IE 8 serializes `undefined` as `\"undefined\"`. Safari \x3c\x3d 5.1.7 and\n              // FF 3.1b3 pass this test.\n              stringify(undef) \x3d\x3d\x3d undef \x26\x26\n              // Safari \x3c\x3d 5.1.7 and FF 3.1b3 throw `Error`s and `TypeError`s,\n              // respectively, if the value is omitted entirely.\n              stringify() \x3d\x3d\x3d undef \x26\x26\n              // FF 3.1b1, 2 throw an error if the given value is not a number,\n              // string, array, object, Boolean, or `null` literal. This applies to\n              // objects with custom `toJSON` methods as well, unless they are nested\n              // inside object or array literals. YUI 3.0.0b1 ignores custom `toJSON`\n              // methods entirely.\n              stringify(value) \x3d\x3d\x3d \"1\" \x26\x26\n              stringify([value]) \x3d\x3d \"[1]\" \x26\x26\n              // Prototype \x3c\x3d 1.6.1 serializes `[undefined]` as `\"[]\"` instead of\n              // `\"[null]\"`.\n              stringify([undef]) \x3d\x3d \"[null]\" \x26\x26\n              // YUI 3.0.0b1 fails to serialize `null` literals.\n              stringify(null) \x3d\x3d \"null\" \x26\x26\n              // FF 3.1b1, 2 halts serialization if an array contains a function:\n              // `[1, true, getClass, 1]` serializes as \"[1,true,],\". FF 3.1b3\n              // elides non-JSON values from objects and arrays, unless they\n              // define custom `toJSON` methods.\n              stringify([undef, getClass, null]) \x3d\x3d \"[null,null,null]\" \x26\x26\n              // Simple serialization test. FF 3.1b1 uses Unicode escape sequences\n              // where character escape codes are expected (e.g., `\\b` \x3d\x3e `\\u0008`).\n              stringify({ \"a\": [value, true, false, null, \"\\x00\\b\\n\\f\\r\\t\"] }) \x3d\x3d serialized \x26\x26\n              // FF 3.1b1 and b2 ignore the `filter` and `width` arguments.\n              stringify(null, value) \x3d\x3d\x3d \"1\" \x26\x26\n              stringify([1, 2], null, 1) \x3d\x3d \"[\\n 1,\\n 2\\n]\" \x26\x26\n              // JSON 2, Prototype \x3c\x3d 1.7, and older WebKit builds incorrectly\n              // serialize extended years.\n              stringify(new Date(-8.64e15)) \x3d\x3d '\"-271821-04-20T00:00:00.000Z\"' \x26\x26\n              // The milliseconds are optional in ES 5, but required in 5.1.\n              stringify(new Date(8.64e15)) \x3d\x3d '\"+275760-09-13T00:00:00.000Z\"' \x26\x26\n              // Firefox \x3c\x3d 11.0 incorrectly serializes years prior to 0 as negative\n              // four-digit years instead of six-digit years. Credits: @Yaffle.\n              stringify(new Date(-621987552e5)) \x3d\x3d '\"-000001-01-01T00:00:00.000Z\"' \x26\x26\n              // Safari \x3c\x3d 5.1.5 and Opera \x3e\x3d 10.53 incorrectly serialize millisecond\n              // values less than 1000. Credits: @Yaffle.\n              stringify(new Date(-1)) \x3d\x3d '\"1969-12-31T23:59:59.999Z\"';\n          } catch (exception) {\n            stringifySupported \x3d false;\n          }\n        }\n        isSupported \x3d stringifySupported;\n      }\n      // Test `JSON.parse`.\n      if (name \x3d\x3d \"json-parse\") {\n        var parse \x3d JSON3.parse;\n        if (typeof parse \x3d\x3d \"function\") {\n          try {\n            // FF 3.1b1, b2 will throw an exception if a bare literal is provided.\n            // Conforming implementations should also coerce the initial argument to\n            // a string prior to parsing.\n            if (parse(\"0\") \x3d\x3d\x3d 0 \x26\x26 !parse(false)) {\n              // Simple parsing test.\n              value \x3d parse(serialized);\n              var parseSupported \x3d value[\"a\"].length \x3d\x3d 5 \x26\x26 value[\"a\"][0] \x3d\x3d\x3d 1;\n              if (parseSupported) {\n                try {\n                  // Safari \x3c\x3d 5.1.2 and FF 3.1b1 allow unescaped tabs in strings.\n                  parseSupported \x3d !parse('\"\\t\"');\n                } catch (exception) {}\n                if (parseSupported) {\n                  try {\n                    // FF 4.0 and 4.0.1 allow leading `+` signs and leading\n                    // decimal points. FF 4.0, 4.0.1, and IE 9-10 also allow\n                    // certain octal literals.\n                    parseSupported \x3d parse(\"01\") !\x3d\x3d 1;\n                  } catch (exception) {}\n                }\n                if (parseSupported) {\n                  try {\n                    // FF 4.0, 4.0.1, and Rhino 1.7R3-R4 allow trailing decimal\n                    // points. These environments, along with FF 3.1b1 and 2,\n                    // also allow trailing commas in JSON objects and arrays.\n                    parseSupported \x3d parse(\"1.\") !\x3d\x3d 1;\n                  } catch (exception) {}\n                }\n              }\n            }\n          } catch (exception) {\n            parseSupported \x3d false;\n          }\n        }\n        isSupported \x3d parseSupported;\n      }\n    }\n    return has[name] \x3d !!isSupported;\n  }\n\n  if (!has(\"json\")) {\n    // Common `[[Class]]` name aliases.\n    var functionClass \x3d \"[object Function]\";\n    var dateClass \x3d \"[object Date]\";\n    var numberClass \x3d \"[object Number]\";\n    var stringClass \x3d \"[object String]\";\n    var arrayClass \x3d \"[object Array]\";\n    var booleanClass \x3d \"[object Boolean]\";\n\n    // Detect incomplete support for accessing string characters by index.\n    var charIndexBuggy \x3d has(\"bug-string-char-index\");\n\n    // Define additional utility methods if the `Date` methods are buggy.\n    if (!isExtended) {\n      var floor \x3d Math.floor;\n      // A mapping between the months of the year and the number of days between\n      // January 1st and the first of the respective month.\n      var Months \x3d [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];\n      // Internal: Calculates the number of days between the Unix epoch and the\n      // first day of the given month.\n      var getDay \x3d function (year, month) {\n        return Months[month] + 365 * (year - 1970) + floor((year - 1969 + (month \x3d +(month \x3e 1))) / 4) - floor((year - 1901 + month) / 100) + floor((year - 1601 + month) / 400);\n      };\n    }\n\n    // Internal: Determines if a property is a direct property of the given\n    // object. Delegates to the native `Object#hasOwnProperty` method.\n    if (!(isProperty \x3d {}.hasOwnProperty)) {\n      isProperty \x3d function (property) {\n        var members \x3d {}, constructor;\n        if ((members.__proto__ \x3d null, members.__proto__ \x3d {\n          // The *proto* property cannot be set multiple times in recent\n          // versions of Firefox and SeaMonkey.\n          \"toString\": 1\n        }, members).toString !\x3d getClass) {\n          // Safari \x3c\x3d 2.0.3 doesn't implement `Object#hasOwnProperty`, but\n          // supports the mutable *proto* property.\n          isProperty \x3d function (property) {\n            // Capture and break the object's prototype chain (see section 8.6.2\n            // of the ES 5.1 spec). The parenthesized expression prevents an\n            // unsafe transformation by the Closure Compiler.\n            var original \x3d this.__proto__, result \x3d property in (this.__proto__ \x3d null, this);\n            // Restore the original prototype chain.\n            this.__proto__ \x3d original;\n            return result;\n          };\n        } else {\n          // Capture a reference to the top-level `Object` constructor.\n          constructor \x3d members.constructor;\n          // Use the `constructor` property to simulate `Object#hasOwnProperty` in\n          // other environments.\n          isProperty \x3d function (property) {\n            var parent \x3d (this.constructor || constructor).prototype;\n            return property in this \x26\x26 !(property in parent \x26\x26 this[property] \x3d\x3d\x3d parent[property]);\n          };\n        }\n        members \x3d null;\n        return isProperty.call(this, property);\n      };\n    }\n\n    // Internal: A set of primitive types used by `isHostType`.\n    var PrimitiveTypes \x3d {\n      'boolean': 1,\n      'number': 1,\n      'string': 1,\n      'undefined': 1\n    };\n\n    // Internal: Determines if the given object `property` value is a\n    // non-primitive.\n    var isHostType \x3d function (object, property) {\n      var type \x3d typeof object[property];\n      return type \x3d\x3d 'object' ? !!object[property] : !PrimitiveTypes[type];\n    };\n\n    // Internal: Normalizes the `for...in` iteration algorithm across\n    // environments. Each enumerated key is yielded to a `callback` function.\n    forEach \x3d function (object, callback) {\n      var size \x3d 0, Properties, members, property;\n\n      // Tests for bugs in the current environment's `for...in` algorithm. The\n      // `valueOf` property inherits the non-enumerable flag from\n      // `Object.prototype` in older versions of IE, Netscape, and Mozilla.\n      (Properties \x3d function () {\n        this.valueOf \x3d 0;\n      }).prototype.valueOf \x3d 0;\n\n      // Iterate over a new instance of the `Properties` class.\n      members \x3d new Properties();\n      for (property in members) {\n        // Ignore all properties inherited from `Object.prototype`.\n        if (isProperty.call(members, property)) {\n          size++;\n        }\n      }\n      Properties \x3d members \x3d null;\n\n      // Normalize the iteration algorithm.\n      if (!size) {\n        // A list of non-enumerable properties inherited from `Object.prototype`.\n        members \x3d [\"valueOf\", \"toString\", \"toLocaleString\", \"propertyIsEnumerable\", \"isPrototypeOf\", \"hasOwnProperty\", \"constructor\"];\n        // IE \x3c\x3d 8, Mozilla 1.0, and Netscape 6.2 ignore shadowed non-enumerable\n        // properties.\n        forEach \x3d function (object, callback) {\n          var isFunction \x3d getClass.call(object) \x3d\x3d functionClass, property, length;\n          var hasProperty \x3d !isFunction \x26\x26 typeof object.constructor !\x3d 'function' \x26\x26 isHostType(object, 'hasOwnProperty') ? object.hasOwnProperty : isProperty;\n          for (property in object) {\n            // Gecko \x3c\x3d 1.0 enumerates the `prototype` property of functions under\n            // certain conditions; IE does not.\n            if (!(isFunction \x26\x26 property \x3d\x3d \"prototype\") \x26\x26 hasProperty.call(object, property)) {\n              callback(property);\n            }\n          }\n          // Manually invoke the callback for each non-enumerable property.\n          for (length \x3d members.length; property \x3d members[--length]; hasProperty.call(object, property) \x26\x26 callback(property));\n        };\n      } else if (size \x3d\x3d 2) {\n        // Safari \x3c\x3d 2.0.4 enumerates shadowed properties twice.\n        forEach \x3d function (object, callback) {\n          // Create a set of iterated properties.\n          var members \x3d {}, isFunction \x3d getClass.call(object) \x3d\x3d functionClass, property;\n          for (property in object) {\n            // Store each property name to prevent double enumeration. The\n            // `prototype` property of functions is not enumerated due to cross-\n            // environment inconsistencies.\n            if (!(isFunction \x26\x26 property \x3d\x3d \"prototype\") \x26\x26 !isProperty.call(members, property) \x26\x26 (members[property] \x3d 1) \x26\x26 isProperty.call(object, property)) {\n              callback(property);\n            }\n          }\n        };\n      } else {\n        // No bugs detected; use the standard `for...in` algorithm.\n        forEach \x3d function (object, callback) {\n          var isFunction \x3d getClass.call(object) \x3d\x3d functionClass, property, isConstructor;\n          for (property in object) {\n            if (!(isFunction \x26\x26 property \x3d\x3d \"prototype\") \x26\x26 isProperty.call(object, property) \x26\x26 !(isConstructor \x3d property \x3d\x3d\x3d \"constructor\")) {\n              callback(property);\n            }\n          }\n          // Manually invoke the callback for the `constructor` property due to\n          // cross-environment inconsistencies.\n          if (isConstructor || isProperty.call(object, (property \x3d \"constructor\"))) {\n            callback(property);\n          }\n        };\n      }\n      return forEach(object, callback);\n    };\n\n    // Public: Serializes a JavaScript `value` as a JSON string. The optional\n    // `filter` argument may specify either a function that alters how object and\n    // array members are serialized, or an array of strings and numbers that\n    // indicates which properties should be serialized. The optional `width`\n    // argument may be either a string or number that specifies the indentation\n    // level of the output.\n    if (!has(\"json-stringify\")) {\n      // Internal: A map of control characters and their escaped equivalents.\n      var Escapes \x3d {\n        92: \"\\\\\\\\\",\n        34: '\\\\\"',\n        8: \"\\\\b\",\n        12: \"\\\\f\",\n        10: \"\\\\n\",\n        13: \"\\\\r\",\n        9: \"\\\\t\"\n      };\n\n      // Internal: Converts `value` into a zero-padded string such that its\n      // length is at least equal to `width`. The `width` must be \x3c\x3d 6.\n      var leadingZeroes \x3d \"000000\";\n      var toPaddedString \x3d function (width, value) {\n        // The `|| 0` expression is necessary to work around a bug in\n        // Opera \x3c\x3d 7.54u2 where `0 \x3d\x3d -0`, but `String(-0) !\x3d\x3d \"0\"`.\n        return (leadingZeroes + (value || 0)).slice(-width);\n      };\n\n      // Internal: Double-quotes a string `value`, replacing all ASCII control\n      // characters (characters with code unit values between 0 and 31) with\n      // their escaped equivalents. This is an implementation of the\n      // `Quote(value)` operation defined in ES 5.1 section 15.12.3.\n      var unicodePrefix \x3d \"\\\\u00\";\n      var quote \x3d function (value) {\n        var result \x3d '\"', index \x3d 0, length \x3d value.length, isLarge \x3d length \x3e 10 \x26\x26 charIndexBuggy, symbols;\n        if (isLarge) {\n          symbols \x3d value.split(\"\");\n        }\n        for (; index \x3c length; index++) {\n          var charCode \x3d value.charCodeAt(index);\n          // If the character is a control character, append its Unicode or\n          // shorthand escape sequence; otherwise, append the character as-is.\n          switch (charCode) {\n            case 8: case 9: case 10: case 12: case 13: case 34: case 92:\n              result +\x3d Escapes[charCode];\n              break;\n            default:\n              if (charCode \x3c 32) {\n                result +\x3d unicodePrefix + toPaddedString(2, charCode.toString(16));\n                break;\n              }\n              result +\x3d isLarge ? symbols[index] : charIndexBuggy ? value.charAt(index) : value[index];\n          }\n        }\n        return result + '\"';\n      };\n\n      // Internal: Recursively serializes an object. Implements the\n      // `Str(key, holder)`, `JO(value)`, and `JA(value)` operations.\n      var serialize \x3d function (property, object, callback, properties, whitespace, indentation, stack) {\n        var value, className, year, month, date, time, hours, minutes, seconds, milliseconds, results, element, index, length, prefix, result;\n        try {\n          // Necessary for host object support.\n          value \x3d object[property];\n        } catch (exception) {}\n        if (typeof value \x3d\x3d \"object\" \x26\x26 value) {\n          className \x3d getClass.call(value);\n          if (className \x3d\x3d dateClass \x26\x26 !isProperty.call(value, \"toJSON\")) {\n            if (value \x3e -1 / 0 \x26\x26 value \x3c 1 / 0) {\n              // Dates are serialized according to the `Date#toJSON` method\n              // specified in ES 5.1 section 15.9.5.44. See section 15.9.1.15\n              // for the ISO 8601 date time string format.\n              if (getDay) {\n                // Manually compute the year, month, date, hours, minutes,\n                // seconds, and milliseconds if the `getUTC*` methods are\n                // buggy. Adapted from @Yaffle's `date-shim` project.\n                date \x3d floor(value / 864e5);\n                for (year \x3d floor(date / 365.2425) + 1970 - 1; getDay(year + 1, 0) \x3c\x3d date; year++);\n                for (month \x3d floor((date - getDay(year, 0)) / 30.42); getDay(year, month + 1) \x3c\x3d date; month++);\n                date \x3d 1 + date - getDay(year, month);\n                // The `time` value specifies the time within the day (see ES\n                // 5.1 section 15.9.1.2). The formula `(A % B + B) % B` is used\n                // to compute `A modulo B`, as the `%` operator does not\n                // correspond to the `modulo` operation for negative numbers.\n                time \x3d (value % 864e5 + 864e5) % 864e5;\n                // The hours, minutes, seconds, and milliseconds are obtained by\n                // decomposing the time within the day. See section 15.9.1.10.\n                hours \x3d floor(time / 36e5) % 24;\n                minutes \x3d floor(time / 6e4) % 60;\n                seconds \x3d floor(time / 1e3) % 60;\n                milliseconds \x3d time % 1e3;\n              } else {\n                year \x3d value.getUTCFullYear();\n                month \x3d value.getUTCMonth();\n                date \x3d value.getUTCDate();\n                hours \x3d value.getUTCHours();\n                minutes \x3d value.getUTCMinutes();\n                seconds \x3d value.getUTCSeconds();\n                milliseconds \x3d value.getUTCMilliseconds();\n              }\n              // Serialize extended years correctly.\n              value \x3d (year \x3c\x3d 0 || year \x3e\x3d 1e4 ? (year \x3c 0 ? \"-\" : \"+\") + toPaddedString(6, year \x3c 0 ? -year : year) : toPaddedString(4, year)) +\n                \"-\" + toPaddedString(2, month + 1) + \"-\" + toPaddedString(2, date) +\n                // Months, dates, hours, minutes, and seconds should have two\n                // digits; milliseconds should have three.\n                \"T\" + toPaddedString(2, hours) + \":\" + toPaddedString(2, minutes) + \":\" + toPaddedString(2, seconds) +\n                // Milliseconds are optional in ES 5.0, but required in 5.1.\n                \".\" + toPaddedString(3, milliseconds) + \"Z\";\n            } else {\n              value \x3d null;\n            }\n          } else if (typeof value.toJSON \x3d\x3d \"function\" \x26\x26 ((className !\x3d numberClass \x26\x26 className !\x3d stringClass \x26\x26 className !\x3d arrayClass) || isProperty.call(value, \"toJSON\"))) {\n            // Prototype \x3c\x3d 1.6.1 adds non-standard `toJSON` methods to the\n            // `Number`, `String`, `Date`, and `Array` prototypes. JSON 3\n            // ignores all `toJSON` methods on these objects unless they are\n            // defined directly on an instance.\n            value \x3d value.toJSON(property);\n          }\n        }\n        if (callback) {\n          // If a replacement function was provided, call it to obtain the value\n          // for serialization.\n          value \x3d callback.call(object, property, value);\n        }\n        if (value \x3d\x3d\x3d null) {\n          return \"null\";\n        }\n        className \x3d getClass.call(value);\n        if (className \x3d\x3d booleanClass) {\n          // Booleans are represented literally.\n          return \"\" + value;\n        } else if (className \x3d\x3d numberClass) {\n          // JSON numbers must be finite. `Infinity` and `NaN` are serialized as\n          // `\"null\"`.\n          return value \x3e -1 / 0 \x26\x26 value \x3c 1 / 0 ? \"\" + value : \"null\";\n        } else if (className \x3d\x3d stringClass) {\n          // Strings are double-quoted and escaped.\n          return quote(\"\" + value);\n        }\n        // Recursively serialize objects and arrays.\n        if (typeof value \x3d\x3d \"object\") {\n          // Check for cyclic structures. This is a linear search; performance\n          // is inversely proportional to the number of unique nested objects.\n          for (length \x3d stack.length; length--;) {\n            if (stack[length] \x3d\x3d\x3d value) {\n              // Cyclic structures cannot be serialized by `JSON.stringify`.\n              throw TypeError();\n            }\n          }\n          // Add the object to the stack of traversed objects.\n          stack.push(value);\n          results \x3d [];\n          // Save the current indentation level and indent one additional level.\n          prefix \x3d indentation;\n          indentation +\x3d whitespace;\n          if (className \x3d\x3d arrayClass) {\n            // Recursively serialize array elements.\n            for (index \x3d 0, length \x3d value.length; index \x3c length; index++) {\n              element \x3d serialize(index, value, callback, properties, whitespace, indentation, stack);\n              results.push(element \x3d\x3d\x3d undef ? \"null\" : element);\n            }\n            result \x3d results.length ? (whitespace ? \"[\\n\" + indentation + results.join(\",\\n\" + indentation) + \"\\n\" + prefix + \"]\" : (\"[\" + results.join(\",\") + \"]\")) : \"[]\";\n          } else {\n            // Recursively serialize object members. Members are selected from\n            // either a user-specified list of property names, or the object\n            // itself.\n            forEach(properties || value, function (property) {\n              var element \x3d serialize(property, value, callback, properties, whitespace, indentation, stack);\n              if (element !\x3d\x3d undef) {\n                // According to ES 5.1 section 15.12.3: \"If `gap` {whitespace}\n                // is not the empty string, let `member` {quote(property) + \":\"}\n                // be the concatenation of `member` and the `space` character.\"\n                // The \"`space` character\" refers to the literal space\n                // character, not the `space` {width} argument provided to\n                // `JSON.stringify`.\n                results.push(quote(property) + \":\" + (whitespace ? \" \" : \"\") + element);\n              }\n            });\n            result \x3d results.length ? (whitespace ? \"{\\n\" + indentation + results.join(\",\\n\" + indentation) + \"\\n\" + prefix + \"}\" : (\"{\" + results.join(\",\") + \"}\")) : \"{}\";\n          }\n          // Remove the object from the traversed object stack.\n          stack.pop();\n          return result;\n        }\n      };\n\n      // Public: `JSON.stringify`. See ES 5.1 section 15.12.3.\n      JSON3.stringify \x3d function (source, filter, width) {\n        var whitespace, callback, properties, className;\n        if (typeof filter \x3d\x3d \"function\" || typeof filter \x3d\x3d \"object\" \x26\x26 filter) {\n          if ((className \x3d getClass.call(filter)) \x3d\x3d functionClass) {\n            callback \x3d filter;\n          } else if (className \x3d\x3d arrayClass) {\n            // Convert the property names array into a makeshift set.\n            properties \x3d {};\n            for (var index \x3d 0, length \x3d filter.length, value; index \x3c length; value \x3d filter[index++], ((className \x3d getClass.call(value)), className \x3d\x3d stringClass || className \x3d\x3d numberClass) \x26\x26 (properties[value] \x3d 1));\n          }\n        }\n        if (width) {\n          if ((className \x3d getClass.call(width)) \x3d\x3d numberClass) {\n            // Convert the `width` to an integer and create a string containing\n            // `width` number of space characters.\n            if ((width -\x3d width % 1) \x3e 0) {\n              for (whitespace \x3d \"\", width \x3e 10 \x26\x26 (width \x3d 10); whitespace.length \x3c width; whitespace +\x3d \" \");\n            }\n          } else if (className \x3d\x3d stringClass) {\n            whitespace \x3d width.length \x3c\x3d 10 ? width : width.slice(0, 10);\n          }\n        }\n        // Opera \x3c\x3d 7.54u2 discards the values associated with empty string keys\n        // (`\"\"`) only if they are used directly within an object member list\n        // (e.g., `!(\"\" in { \"\": 1})`).\n        return serialize(\"\", (value \x3d {}, value[\"\"] \x3d source, value), callback, properties, whitespace, \"\", []);\n      };\n    }\n\n    // Public: Parses a JSON source string.\n    if (!has(\"json-parse\")) {\n      var fromCharCode \x3d String.fromCharCode;\n\n      // Internal: A map of escaped control characters and their unescaped\n      // equivalents.\n      var Unescapes \x3d {\n        92: \"\\\\\",\n        34: '\"',\n        47: \"/\",\n        98: \"\\b\",\n        116: \"\\t\",\n        110: \"\\n\",\n        102: \"\\f\",\n        114: \"\\r\"\n      };\n\n      // Internal: Stores the parser state.\n      var Index, Source;\n\n      // Internal: Resets the parser state and throws a `SyntaxError`.\n      var abort \x3d function() {\n        Index \x3d Source \x3d null;\n        throw SyntaxError();\n      };\n\n      // Internal: Returns the next token, or `\"$\"` if the parser has reached\n      // the end of the source string. A token may be a string, number, `null`\n      // literal, or Boolean literal.\n      var lex \x3d function () {\n        var source \x3d Source, length \x3d source.length, value, begin, position, isSigned, charCode;\n        while (Index \x3c length) {\n          charCode \x3d source.charCodeAt(Index);\n          switch (charCode) {\n            case 9: case 10: case 13: case 32:\n              // Skip whitespace tokens, including tabs, carriage returns, line\n              // feeds, and space characters.\n              Index++;\n              break;\n            case 123: case 125: case 91: case 93: case 58: case 44:\n              // Parse a punctuator token (`{`, `}`, `[`, `]`, `:`, or `,`) at\n              // the current position.\n              value \x3d charIndexBuggy ? source.charAt(Index) : source[Index];\n              Index++;\n              return value;\n            case 34:\n              // `\"` delimits a JSON string; advance to the next character and\n              // begin parsing the string. String tokens are prefixed with the\n              // sentinel `@` character to distinguish them from punctuators and\n              // end-of-string tokens.\n              for (value \x3d \"@\", Index++; Index \x3c length;) {\n                charCode \x3d source.charCodeAt(Index);\n                if (charCode \x3c 32) {\n                  // Unescaped ASCII control characters (those with a code unit\n                  // less than the space character) are not permitted.\n                  abort();\n                } else if (charCode \x3d\x3d 92) {\n                  // A reverse solidus (`\\`) marks the beginning of an escaped\n                  // control character (including `\"`, `\\`, and `/`) or Unicode\n                  // escape sequence.\n                  charCode \x3d source.charCodeAt(++Index);\n                  switch (charCode) {\n                    case 92: case 34: case 47: case 98: case 116: case 110: case 102: case 114:\n                      // Revive escaped control characters.\n                      value +\x3d Unescapes[charCode];\n                      Index++;\n                      break;\n                    case 117:\n                      // `\\u` marks the beginning of a Unicode escape sequence.\n                      // Advance to the first character and validate the\n                      // four-digit code point.\n                      begin \x3d ++Index;\n                      for (position \x3d Index + 4; Index \x3c position; Index++) {\n                        charCode \x3d source.charCodeAt(Index);\n                        // A valid sequence comprises four hexdigits (case-\n                        // insensitive) that form a single hexadecimal value.\n                        if (!(charCode \x3e\x3d 48 \x26\x26 charCode \x3c\x3d 57 || charCode \x3e\x3d 97 \x26\x26 charCode \x3c\x3d 102 || charCode \x3e\x3d 65 \x26\x26 charCode \x3c\x3d 70)) {\n                          // Invalid Unicode escape sequence.\n                          abort();\n                        }\n                      }\n                      // Revive the escaped character.\n                      value +\x3d fromCharCode(\"0x\" + source.slice(begin, Index));\n                      break;\n                    default:\n                      // Invalid escape sequence.\n                      abort();\n                  }\n                } else {\n                  if (charCode \x3d\x3d 34) {\n                    // An unescaped double-quote character marks the end of the\n                    // string.\n                    break;\n                  }\n                  charCode \x3d source.charCodeAt(Index);\n                  begin \x3d Index;\n                  // Optimize for the common case where a string is valid.\n                  while (charCode \x3e\x3d 32 \x26\x26 charCode !\x3d 92 \x26\x26 charCode !\x3d 34) {\n                    charCode \x3d source.charCodeAt(++Index);\n                  }\n                  // Append the string as-is.\n                  value +\x3d source.slice(begin, Index);\n                }\n              }\n              if (source.charCodeAt(Index) \x3d\x3d 34) {\n                // Advance to the next character and return the revived string.\n                Index++;\n                return value;\n              }\n              // Unterminated string.\n              abort();\n            default:\n              // Parse numbers and literals.\n              begin \x3d Index;\n              // Advance past the negative sign, if one is specified.\n              if (charCode \x3d\x3d 45) {\n                isSigned \x3d true;\n                charCode \x3d source.charCodeAt(++Index);\n              }\n              // Parse an integer or floating-point value.\n              if (charCode \x3e\x3d 48 \x26\x26 charCode \x3c\x3d 57) {\n                // Leading zeroes are interpreted as octal literals.\n                if (charCode \x3d\x3d 48 \x26\x26 ((charCode \x3d source.charCodeAt(Index + 1)), charCode \x3e\x3d 48 \x26\x26 charCode \x3c\x3d 57)) {\n                  // Illegal octal literal.\n                  abort();\n                }\n                isSigned \x3d false;\n                // Parse the integer component.\n                for (; Index \x3c length \x26\x26 ((charCode \x3d source.charCodeAt(Index)), charCode \x3e\x3d 48 \x26\x26 charCode \x3c\x3d 57); Index++);\n                // Floats cannot contain a leading decimal point; however, this\n                // case is already accounted for by the parser.\n                if (source.charCodeAt(Index) \x3d\x3d 46) {\n                  position \x3d ++Index;\n                  // Parse the decimal component.\n                  for (; position \x3c length \x26\x26 ((charCode \x3d source.charCodeAt(position)), charCode \x3e\x3d 48 \x26\x26 charCode \x3c\x3d 57); position++);\n                  if (position \x3d\x3d Index) {\n                    // Illegal trailing decimal.\n                    abort();\n                  }\n                  Index \x3d position;\n                }\n                // Parse exponents. The `e` denoting the exponent is\n                // case-insensitive.\n                charCode \x3d source.charCodeAt(Index);\n                if (charCode \x3d\x3d 101 || charCode \x3d\x3d 69) {\n                  charCode \x3d source.charCodeAt(++Index);\n                  // Skip past the sign following the exponent, if one is\n                  // specified.\n                  if (charCode \x3d\x3d 43 || charCode \x3d\x3d 45) {\n                    Index++;\n                  }\n                  // Parse the exponential component.\n                  for (position \x3d Index; position \x3c length \x26\x26 ((charCode \x3d source.charCodeAt(position)), charCode \x3e\x3d 48 \x26\x26 charCode \x3c\x3d 57); position++);\n                  if (position \x3d\x3d Index) {\n                    // Illegal empty exponent.\n                    abort();\n                  }\n                  Index \x3d position;\n                }\n                // Coerce the parsed value to a JavaScript number.\n                return +source.slice(begin, Index);\n              }\n              // A negative sign may only precede numbers.\n              if (isSigned) {\n                abort();\n              }\n              // `true`, `false`, and `null` literals.\n              if (source.slice(Index, Index + 4) \x3d\x3d \"true\") {\n                Index +\x3d 4;\n                return true;\n              } else if (source.slice(Index, Index + 5) \x3d\x3d \"false\") {\n                Index +\x3d 5;\n                return false;\n              } else if (source.slice(Index, Index + 4) \x3d\x3d \"null\") {\n                Index +\x3d 4;\n                return null;\n              }\n              // Unrecognized token.\n              abort();\n          }\n        }\n        // Return the sentinel `$` character if the parser has reached the end\n        // of the source string.\n        return \"$\";\n      };\n\n      // Internal: Parses a JSON `value` token.\n      var get \x3d function (value) {\n        var results, hasMembers;\n        if (value \x3d\x3d \"$\") {\n          // Unexpected end of input.\n          abort();\n        }\n        if (typeof value \x3d\x3d \"string\") {\n          if ((charIndexBuggy ? value.charAt(0) : value[0]) \x3d\x3d \"@\") {\n            // Remove the sentinel `@` character.\n            return value.slice(1);\n          }\n          // Parse object and array literals.\n          if (value \x3d\x3d \"[\") {\n            // Parses a JSON array, returning a new JavaScript array.\n            results \x3d [];\n            for (;; hasMembers || (hasMembers \x3d true)) {\n              value \x3d lex();\n              // A closing square bracket marks the end of the array literal.\n              if (value \x3d\x3d \"]\") {\n                break;\n              }\n              // If the array literal contains elements, the current token\n              // should be a comma separating the previous element from the\n              // next.\n              if (hasMembers) {\n                if (value \x3d\x3d \",\") {\n                  value \x3d lex();\n                  if (value \x3d\x3d \"]\") {\n                    // Unexpected trailing `,` in array literal.\n                    abort();\n                  }\n                } else {\n                  // A `,` must separate each array element.\n                  abort();\n                }\n              }\n              // Elisions and leading commas are not permitted.\n              if (value \x3d\x3d \",\") {\n                abort();\n              }\n              results.push(get(value));\n            }\n            return results;\n          } else if (value \x3d\x3d \"{\") {\n            // Parses a JSON object, returning a new JavaScript object.\n            results \x3d {};\n            for (;; hasMembers || (hasMembers \x3d true)) {\n              value \x3d lex();\n              // A closing curly brace marks the end of the object literal.\n              if (value \x3d\x3d \"}\") {\n                break;\n              }\n              // If the object literal contains members, the current token\n              // should be a comma separator.\n              if (hasMembers) {\n                if (value \x3d\x3d \",\") {\n                  value \x3d lex();\n                  if (value \x3d\x3d \"}\") {\n                    // Unexpected trailing `,` in object literal.\n                    abort();\n                  }\n                } else {\n                  // A `,` must separate each object member.\n                  abort();\n                }\n              }\n              // Leading commas are not permitted, object property names must be\n              // double-quoted strings, and a `:` must separate each property\n              // name and value.\n              if (value \x3d\x3d \",\" || typeof value !\x3d \"string\" || (charIndexBuggy ? value.charAt(0) : value[0]) !\x3d \"@\" || lex() !\x3d \":\") {\n                abort();\n              }\n              results[value.slice(1)] \x3d get(lex());\n            }\n            return results;\n          }\n          // Unexpected token encountered.\n          abort();\n        }\n        return value;\n      };\n\n      // Internal: Updates a traversed object member.\n      var update \x3d function(source, property, callback) {\n        var element \x3d walk(source, property, callback);\n        if (element \x3d\x3d\x3d undef) {\n          delete source[property];\n        } else {\n          source[property] \x3d element;\n        }\n      };\n\n      // Internal: Recursively traverses a parsed JSON object, invoking the\n      // `callback` function for each value. This is an implementation of the\n      // `Walk(holder, name)` operation defined in ES 5.1 section 15.12.2.\n      var walk \x3d function (source, property, callback) {\n        var value \x3d source[property], length;\n        if (typeof value \x3d\x3d \"object\" \x26\x26 value) {\n          // `forEach` can't be used to traverse an array in Opera \x3c\x3d 8.54\n          // because its `Object#hasOwnProperty` implementation returns `false`\n          // for array indices (e.g., `![1, 2, 3].hasOwnProperty(\"0\")`).\n          if (getClass.call(value) \x3d\x3d arrayClass) {\n            for (length \x3d value.length; length--;) {\n              update(value, length, callback);\n            }\n          } else {\n            forEach(value, function (property) {\n              update(value, property, callback);\n            });\n          }\n        }\n        return callback.call(source, property, value);\n      };\n\n      // Public: `JSON.parse`. See ES 5.1 section 15.12.2.\n      JSON3.parse \x3d function (source, callback) {\n        var result, value;\n        Index \x3d 0;\n        Source \x3d \"\" + source;\n        result \x3d get(lex());\n        // If a JSON string contains multiple tokens, it is invalid.\n        if (lex() !\x3d \"$\") {\n          abort();\n        }\n        // Reset the parser state.\n        Index \x3d Source \x3d null;\n        return callback \x26\x26 getClass.call(callback) \x3d\x3d functionClass ? walk((value \x3d {}, value[\"\"] \x3d result, value), \"\", callback) : result;\n      };\n    }\n  }\n\n  // Export for asynchronous module loaders.\n  if (isLoader) {\n    define(function () {\n      return JSON3;\n    });\n  }\n}(this));\n\n},{}],48:[function(_dereq_,module,exports){\nmodule.exports \x3d toArray\n\nfunction toArray(list, index) {\n    var array \x3d []\n\n    index \x3d index || 0\n\n    for (var i \x3d index || 0; i \x3c list.length; i++) {\n        array[i - index] \x3d list[i]\n    }\n\n    return array\n}\n\n},{}]},{},[1])\n(1)\n});\n"},
483:function(e,f,c){!function(){function c(){return parseInt(n&&n.get("text"),10)}function e(a){0>a&&(a=0);n.toggleClass("active",0<a);n.set("text",a);when(w,function(b){b.toggleClass("read",0===a);b.toggleClass("fa-bell-o",0===a);b.toggleClass("unread",0!==a);b.toggleClass("fa-bell",0!==a)});when(x,function(b){b.set("text",a);b.toggleClass("hidden",0===a)}.bind(this))}function d(a){a.preventDefault()}function b(a,b){a.toggleClass("read",b).toggleClass("unread",!b)}function a(a){var c=this.get("data-notificationid"),
d=this.getChildren("a \x3e i[.notification-icon]")[0];d.hasClass("read")||(this.getChildren("a")[0].get("href")&&this.set("data-leaving-page","data-leaving-page"),(new Request.API_2_0("notifications?ids\x3d"+c,{method:"GET",onSuccess:function(a){d.hasClass("unread")?(b(d,!0),a=d.getParent("li"),a.hasClass("unread")&&b(a,!0),when(l,function(a){m([c])}.bind(this))):when(p,function(a){if(a=a.getChildren('ul \x3e li[data-notificationid\x3d"'+c+'"]')[0])a=a.getChildren("a \x3e i[.notification-icon]")[0],
b(a,!0),a=a.getParent("li"),a.hasClass("unread")&&b(a,!0)})}.bind(this)})).send())}function f(){(new Request.API_2_0("notifications/all",{method:"DELETE",onSuccess:function(a){m()}.bind(this)})).send()}function v(){r.addClass("hidden");f();window.location.reload()}function h(a){return a&&null===a.get("data-leaving-page")}function m(a){if(void 0===a)Header.toggleHeaderDropdown(q,!1),e(0),when(l,function(a){a.getElements("li[data-notificationid]").filter(h).each(function(a){a.destroy()})}.bind(this)),
when(p,function(a){a.getChildren("ul \x3e li[data-notificationid] \x3e a \x3e i[.notification-icon]").each(function(a){b(a,!0);a=a.getParent("li");a.hasClass("unread")&&b(a,!0)})});else{var d=c();a.forEach(function(a){var b=l.getChildren('li[data-notificationid\x3d"'+a+'"]')[0];document.title=t;h(b)&&b.destroy();when(p,function(b){(b=b.querySelector('[data-notificationid\x3d"'+a+'"]'))&&(b=b.getElement(".notification-icon"))&&(b.addClass("read"),b.removeClass("unread"))});d--});0==d&&Header.toggleHeaderDropdown(q,
!1);e(d)}}var u=$("rtNotificationsToggle"),q=$("rtNotificationsContainer"),l=$("notificationsDropdown"),n=$("unreadCount"),w=$("notify-bell"),y=$("mark-all-read"),r=$("markAllHistoryRead"),p=$("notificationHistory"),x=$("historyCount"),z=0,t=document.title;when(y,function(a){a.addEvent("click",f)});when(r,function(a){a.addEvent("click",v)});when(u,function(b){if(Header.setupHeaderDropdown(u,q,{unlock:function(){return 0<c()}}),l.addEvent("click:relay(li[data-notificationid] .notification-dismiss)",
d),window.addEvent("click:relay(li[data-notificationid])",a),App.realtimeEnabled&&void 0!==App.socketioRoom){var f=io(App.realtimeHost,{transports:["websocket","polling"]});f.on("connect",function(){f.emit("subscribe",{room:App.socketioRoom})});f.on("notification",function(a){switch(a.event){case "notification":e(c()+1);a.contextid===App.contextid&&a.context===App.context&&(document.title="("+ ++z+") "+t);l.appendHTML(a.html,"top");break;case "markRead":m(a.notificationSigs);break;case "markAllRead":m()}})}})}()},
485:function(e,f,c){c(43);var g=c(9),k=function(c){if(c&&c.__esModule)return c;var b={};if(null!=c)for(var a in c)Object.prototype.hasOwnProperty.call(c,a)&&(b[a]=c[a]);return b.default=c,b}(c(59));!function(){listenGlobal("cart.addcomplete",function(c){if(document.getElementById("hydra-minicart-simple"))window.location=window.shared_constants.BaseURI("TAG_CHECKOUT_CART");else if(c){var b=c.miniCart;when(window.ProductViewPage,function(){ProductViewPage.updateAvailability(c.optionid,c.avail)});g.store.dispatch(k.updateMiniCart(b));
TweenLite.to(window,.5,{scrollTo:0,onComplete:function(){var a=new Event("click",{bubbles:!0});document.getElementById("miniCartDropdownToggle").dispatchEvent(a)}})}})}()}},[[1946,0,1]]]);
